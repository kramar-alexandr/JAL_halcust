external inner procedure NextM4Number(string,var string);function string 255 RemoveNumbers(string code)begin  string 255 res;  integer i;  boolean addf;  string 1 s;  integer n;  addf = true;  for (i = len(code)-1; i >=0; i = i - 1) begin    s = mid(code,i,1);    n = asc(s);    if n>47 and n<58 and addf then begin    end else begin      addf = false;      res = s & res;    end;  end;  RemoveNumbers = res;return;end;function integer GetCodeNum(string code)begin  integer res;  integer i;  string 10 tmp;  boolean addf;  string 1 s;  integer n;  addf = true;  for (i = len(code)-1; i >=0; i = i - 1) begin    s = mid(code,i,1);    n = asc(s);    if n>47 and n<58 and addf then begin      tmp =  s & tmp;    end else begin      addf = false;      i = -1;    end;  end;  res = StringToInt(tmp);  GetCodeNum = res;return;end;function string 40 GetNextCode_Element(string code)begin  record WebNGElementVc WEr;  string 40 tmp,ncode;  integer max,num;  string 40 tstr;  boolean TrHs;    tstr = RemoveNumbers(code);  max = 0;  WEr.Code = tstr;  TrHs = true;  while loopkey("Code",WEr,1,TrHs) begin    if left(WEr.Code,len(tstr)) == tstr then begin      num = GetCodeNum(WEr.Code);      if num>max then begin        max = num;      end;    end else begin      TrHs = false;    end;  end;  //NextM4Number(tmp,ncode);  ncode = tstr & (max+1);    GetNextCode_Element = ncode;return;end;function string 40 GetNextCode_Page(string code)begin  record WebNGPageVc WPr;  string 40 tmp,ncode;  integer max,num;  string 40 tstr;  boolean TrHs;    tstr = RemoveNumbers(code);  max = 0;  WPr.Code = tstr;  TrHs = true;  while loopkey("Code",WPr,1,TrHs) begin    if left(WPr.Code,len(tstr)) == tstr then begin      num = GetCodeNum(WPr.Code);      if num>max then begin        max = num;      end;    end else begin      TrHs = false;    end;  end;  //NextM4Number(tmp,ncode);  ncode = tstr & (max+1);    GetNextCode_Page = ncode;return;end;globalfunction string 40 GetNextCode_Menu(string code)begin  record WebNGMenuVc WMr;  string 40 tmp,ncode;  integer max,num;  string 40 tstr;  boolean TrHs;    tstr = RemoveNumbers(code);  max = 0;  WMr.Code = tstr;  TrHs = true;  while loopkey("Code",WMr,1,TrHs) begin    if left(WMr.Code,len(tstr)) == tstr then begin      num = GetCodeNum(WMr.Code);      if num>max then begin        max = num;      end;    end else begin      TrHs = false;    end;  end;  //NextM4Number(tmp,ncode);  ncode = tstr & (max+1);    GetNextCode_Menu = ncode;return;end;function string 40 GetNextCode_Menu2(string code)begin  record WebNGMenuVc WMr;  string 40 tmp,ncode;  integer i;  boolean testf;  /*  tmp = code;  WMr.Code = code & "9999999";  if readlastkey("Code",WMr,1,false) then begin    if code == mid(WMr.Code,0,len(code)) then begin      tmp = WMr.Code;    end;  end;  NextM4Number(tmp,ncode);  */  i = 1;  testf = true;  while testf begin    WMr.Code = code & i & "_";    if readfirstmain(WMr,1,true)==false begin      testf = false;    end else begin      i = i + 1;    end;  end;    ncode = code & i & "_";  GetNextCode_Menu2 = ncode;return;end;function boolean CodeInArray(string code,array string arr,array integer atype,array integer atr,integer size,integer rtype,var boolean trf)begin  integer i;  boolean res;  for (i = 0; i < size; i = i + 1) begin    if mid(code,0,len(arr[i])) == arr[i] and (atype[i] == 0 or atype[i] == rtype) then begin      res = true;      trf = atr[i] == 0;      i = size;    end;  end;  CodeInArray = res;return;end;updating procedure CreateDuplicateElement_Page(string code,var record WebNGPageVc WPr,integer rw)begin  record WebNGElementVc WEr,tWEr;  row WebNGElementVc WErw;  row WebNGPageVc WPrw;  WEr.Code = code;  if readfirstmain(WEr,1,true) then begin    recordCopy(tWEr,WEr);    tWEr.Code = GetNextCode_Element(WEr.Code);    if recordStore(tWEr,true) then begin      MatRowGet(WPr,rw,WPrw);      WPrw.WebElement = tWEr.Code;      MatRowPut(WPr,rw,WPrw);    end;  end;return;end;updating procedure CreateDuplicateElement_Element(string code,var record WebNGElementVc mWEr,integer rw,var string tmenu,boolean trf,string comment)begin  record WebNGElementVc WEr,tWEr;  row WebNGElementVc WErw;  record WebNGMenuVc WMr;  record WebNGTranslateVc nWTr,WTr;  boolean TrHs;  WEr.Code = code;  if readfirstmain(WEr,1,true) then begin    recordCopy(tWEr,WEr);    tWEr.Code = GetNextCode_Element(WEr.Code);    if tWEr.Type == 2 then begin      RecordNew(WMr);      WMr.Code = GetNextCode_Menu2(tWEr.WebMenu);      tWEr.WebMenu = WMr.Code;    end;    if recordStore(tWEr,true) then begin      if tWEr.Type == 2 then begin       recordStore(WMr,true);       tmenu = WMr.Code;      end;      if trf then begin        WTr.Code = WEr.Code;        //WTr.FileName = 0;        TrHs = true;        while loopkey("Code",WTr,1,TrHs) begin          if WTr.Code <> WEr.Code then begin            TrHs = false;          end else begin            if WTr.FileName == 0 then begin              recordCopy(nWTr,WTr);              nWTr.Code = tWEr.Code;              nWTr.Comment = comment;              recordStore(nWTr,true);            end;          end;        end;      end;      MatRowGet(mWEr,rw,WErw);      WErw.WebElement = tWEr.Code;      MatRowPut(mWEr,rw,WErw);    end;  end;return;end;updating procedure CheckWebElement(string code,array string arr,array integer atype,array integer atr,integer size,integer type,var string tmenu,string comment)begin  integer i,rwcnt;  record WebNGElementVc WEr,oldWEr;  row WebNGElementVc WErw;  boolean updatef,trf;  WEr.Code = code;  if readfirstmain(WEr,1,true) then begin    recordCopy(oldWEr,WEr);    rwcnt = MatRowCnt(WEr);    for (i = 0; i < rwcnt;i = i + 1) begin      MatRowGet(WEr,i,WErw);      if CodeInArray(WErw.WebElement,arr,atype,atr,size,type,trf) then begin        CreateDuplicateElement_Element(WErw.WebElement,WEr,i,tmenu,trf,comment);              MatRowGet(WEr,i,WErw);        CheckWebElement(WErw.WebElement,arr,atype,atr,size,type,tmenu,comment);        updatef = true;      end;    end;    if updatef then begin      recordUpdate(oldWEr,WEr,true);    end;  end;return;end;updating procedure UpdateElements(string code,record WebTemplateVc Templater,integer type,var string tmenu,string comment)begin  integer i,rwcnt;  row WebTemplateVc Templaterw;  record WebNGPageVc WPr,oldWPr;  row WebNGPageVc WPrw;  boolean updatef;  array string 30 ael;  integer size;  array integer atype;  array integer atr;  boolean transf;    rwcnt = MatRowCnt(Templater);  for (i = 0; i < rwcnt; i = i + 1) begin    MatRowGet(Templater,i,Templaterw);    if nonblank(Templaterw.ElementCode) then begin      ael[size] = Templaterw.ElementCode;      atype[size] = Templaterw.Type;      atr[size] = Templaterw.TransFlag;      size = size + 1;    end;  end;  if size > 0 then begin    WPr.Code = code;    if readfirstmain(WPr,1,true) then begin      recordCopy(oldWPr,WPr);      rwcnt = MatRowCnt(WPr);      for (i = 0; i < rwcnt; i = i + 1) begin        MatRowGet(WPr,i,WPrw);        transf = false;        if CodeInArray(WPrw.WebElement,ael,atype,atr,size,type,transf) then begin          CreateDuplicateElement_Page(WPrw.WebElement,WPr,i);          updatef = true;          MatRowGet(WPr,i,WPrw);          CheckWebElement(WPrw.WebElement,ael,atype,atr,size,type,tmenu,comment);        end;      end;      if updatef then begin        if recordUpdate(oldWPr,WPr,true) then begin end;      end;    end;  end;return;end;function longint GetMotherStructure(string menu)begin  record WebNGMenuVc WMr;  longint res;  WMr.Code = menu;  if readfirstmain(WMr,1,true) then begin    res = WMr.LinkToStruct;  end;  GetMotherStructure = res;return;end;globalupdating function boolean CreateNode_Remote(record WebNGMenuVc tWMr)begin  record WebNGMenuVc WMr,mWMr,oldWMr;  record WebNGStructVc WSr;  record WebNGPageVc WPr,tWPr;  record WebTemplateVc Templater;  boolean res;  string 20 tmenu;  res = true;  if nonblank(tWMr.ParentMenu) and nonblank(tWMr.WebElement) and nonblank(tWMr.Comment) then begin    mWMr.Code = tWMr.ParentMenu;    if readfirstmain(mWMr,1,true) then begin end;    //recordNew(WMr);    //WMr.Code = GetNextCode_Menu(mWMr.Code);    //WMr.ParentMenu = mWMr.Code;    RecordNew(WSr);    WSr.SerNr = NextSerNr("WebNGStructVc",CurrentDate,-1,false,"");    WSr.Comment = mWMr.Comment;        Templater.Code = tWMr.WebElement;    if readfirstmain(Templater,1,true) then begin      tWPr.Code = Templater.Template;      if readfirstmain(tWPr,1,true) then begin        recordCopy(WPr,tWPr);        WPr.Code = GetNextCode_Page(WPr.Code);        WPr.PageTitle = WSr.Comment;        if recordStore(WPr,true) then begin          WSr.WebPage = WPr.Code;          WSr.Name = tWMr.Comment;          WSr.Mother = GetMotherStructure(mWMr.ParentMenu);          if recordStore(WSr,true) then begin            recordCopy(oldWMr,mWMr);            mWMr.LinkToStruct = WSr.SerNr;            RecordUpdate(oldWMr,mWMr,true);            //WMr.Comment = mWMr.Comment;            //if recordStore(WMr,true) then begin              UpdateElements(WPr.Code,Templater,1,tmenu,mWMr.Comment);              if nonblank(tmenu) then begin                recordNew(WMr);                WMr.ParentMenu = tmenu;                WMr.LinkToStruct = WSr.SerNr;                WMr.Code = GetNextCode_Menu(tmenu);                recordStore(WMr,true);              end;            //end;          end;        end;      end;    end;  end else begin    res = false;  end;    CreateNode_Remote = res;return;end;global updating function boolean DuplicateNode_Remote(record WebNGMenuVc tWMr,var record WebNGMenuVc WMr)begin  record WebNGMenuVc mWMr;  record WebNGStructVc WSr,tWSr;  record WebNGPageVc WPr,tWPr;  record WebTemplateVc Templater;  boolean res;  string 20 tmenu;  res = true;  if nonblank(tWMr.ParentMenu) and nonblank(tWMr.WebElement) and nonblank(tWMr.Comment) then begin    mWMr.Code = tWMr.ParentMenu;    if readfirstmain(mWMr,1,true) then begin end;    recordNew(WMr);    WMr.Code = GetNextCode_Menu(mWMr.Code);    WMr.ParentMenu = mWMr.ParentMenu;    RecordNew(WSr);    WSr.SerNr = NextSerNr("WebNGStructVc",CurrentDate,-1,false,"");    WSr.Comment = mWMr.Comment;        Templater.Code = tWMr.WebElement;    if readfirstmain(Templater,1,true) then begin      tWSr.SerNr = mWMr.LinkToStruct;      if readfirstmain(tWSr,1,true) then begin        tWPr.Code = tWSr.WebPage;        if readfirstmain(tWPr,1,true) then begin          recordCopy(WPr,tWPr);          WPr.Code = GetNextCode_Page(WPr.Code);          WPr.PageTitle = WSr.Comment;          if recordStore(WPr,true) then begin            WSr.WebPage = WPr.Code;            WSr.Name = tWMr.Comment;            WSr.Mother = tWSr.Mother;            if recordStore(WSr,true) then begin              WMr.LinkToStruct = WSr.SerNr;              WMr.Comment = mWMr.Comment;              if recordStore(WMr,true) then begin                UpdateElements(WPr.Code,Templater,2,tmenu,mWMr.Comment);              end;            end;          end;        end;      end;    end;  end else begin    res = false;  end;    DuplicateNode_Remote = res;return;end;