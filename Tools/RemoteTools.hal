//dunno
global
procedure GetCompanyRec(var record GlobalUserVc GlobalUserr)
begin
  row GlobalUserVc GlobalUserrw;
  row CompaniesBlock Comprw,Comp2rw;
  record CompaniesBlock Comp2r;
  integer rw,rwc;
  integer curc;
  boolean testf;
  BlockLoad(Comp2r);
  rwc = MatRowCnt(Comp2r);
  for (rw = 0; rw < rwc; rw = rw + 1) begin
    MatRowGet(Comp2r,rw,Comprw);
    testf = true;
    if len(GlobalUserr.Name)<=3 and len(GlobalUserr.Name)>0 then begin
      if Comprw.PINCode <> GlobalUserr.Name then begin
        testf = false;
      end;
    end;
    if len(GlobalUserr.Name)>3 then begin
      if Comprw.ShortName <> GlobalUserr.Name then begin
        testf = false;
      end;
    end;
    if testf then begin
      GlobalUserrw.CompCode = Comprw.CompCode;
      GlobalUserrw.CompName = Comprw.CompName;
      GlobalUserrw.AccessGroup = Comprw.ShortName;
      MatRowPut(GlobalUserr,MatRowCnt(GlobalUserr),GlobalUserrw);
    end;
  end;
return;
end;

global 
procedure GetElementGroupAr(array string procname,array string labelname,var integer cnt)
begin
  record WebElementGroupVc WEGr;
  boolean Trhs;

  cnt = 0;
  TrHs = true;
  while loopkey("Code",WEGr,1,TrHs) begin
    procname[cnt] = "ElementGroupList" & cnt+1;
    labelname[cnt] = WEGr.Comment;
    cnt = cnt + 1;
  end;
return;
end;

procedure UpdateElementGroupList(integer num)
begin
  integer cnt;
  boolean TrHs;
  record WebElementGroupVc WEGr;

  if num < 1 then begin
    SetWindowSubset(CurWindow,"");
  end else begin
    cnt = 0;
    TrHs = true;
    while loopkey("Code",WEGr,1,TrHs) begin
      cnt = cnt + 1;
      if num == cnt then begin
        TrHs = false;
        SetWindowSubset(CurWindow,WEGr.Code);
      end;
    end;
  end;


return;
end;

global procedure ElementGroupList()
begin

  UpdateElementGroupList(-1);

return;
end;

global procedure ElementGroupList1()
begin

  UpdateElementGroupList(1);

return;
end;

global procedure ElementGroupList2()
begin

  UpdateElementGroupList(2);

return;
end;

global procedure ElementGroupList3()
begin

  UpdateElementGroupList(3);

return;
end;

global
updating procedure AddStudentToSMFRemote(string custcode,record SMFVc SMFr)
begin
  record CUVc CUr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CreateRecordLink(CUr,CurrentCompany,SMFr,CurrentCompany);
    CreateRecordLink(SMFr,CurrentCompany,CUr,CurrentCompany);
  end;

  return;
end;

global
updating procedure CreateSMFSession(record SMFVc SMFr,var record SMFSessionVc SSr)
begin
  
  RecordNew(SSr);
  SSr.UUID = MakeUUID;
  SSr.SMFCode = SMFr.SMFCode;
  RecordInsert(SSr,true);

  return;
end;

function Boolean SubEventExists(record JALEventVc JEr,Integer type,var record JALEventVc nJEr)
begin
  record JALEventVc tJEr;
  Boolean res;

  tJEr.Type = type;
  tJEr.Mother = JEr.SerNr;
  if (ReadFirstKey("TypeMother",tJEr,2,true)) then begin
    res = true;
    RecordCopy(nJEr,tJEr);
  end;

  SubEventExists = res;
  return;
end;

global
updating function Boolean CreateChildEvent(record JALEventVc JEr,Integer type,var record JALEventVc nJEr)
begin
  Boolean res;
  
  if (JEr.Type==0) then begin
    if (SubEventExists(JEr,type,nJEr)==false) then begin
      RecordCopy(nJEr,JEr);
      nJEr.SerNr = NextSerNr("JALEventVc",CurrentDate,-1,false,"");
      nJEr.Type = type;
      nJEr.Mother = JEr.SerNr;
      if (RecordInsert(nJEr,true)) then begin
        res = true;
      end;
    end else begin
      res = true;
    end;
  end;
  
  CreateChildEvent = res;
  return;
end;


global
updating function Boolean FindEventText(record JALEventVc JEr,var record JALEventTextVc JETr)
begin
  Boolean res;

  JETr.EventNr = JEr.SerNr;
  if (ReadFirstMain(JETr,1,true)) then begin
    res = true;
  end else begin
    RecordNew(JETr);
    JETr.EventNr = JEr.SerNr;
    res = true;
  end;
  
  FindEventText = res;//no point in having it as a function really
  return;
end;