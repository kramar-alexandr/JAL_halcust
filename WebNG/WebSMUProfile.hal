external function string 255 ToolWebNGTranslateText2(longint);
external function Boolean FindSMURecord(string,var record SMFVc);
external function Date DateFromString(string,string);
external updating procedure CreateUniqueTeachApp(Integer,string, string);
external procedure SendJALEmail(vector string,string,string);
external procedure OutPutJALWebTexts(Integer);
external function string 255 StrReplace(string,string,string);
external updating procedure FillNewSMUData(var record SMFVc,record CUVc);
external updating procedure GenMailForSMU(string,string,string,string,var record SMFVc,boolean,record CUVc,string);

procedure ShowSMUEditField(string label,string name,string descr)
begin

  WebOutString("<div class=""field_row"">");
  WebOutString("<div class=""field_col""><div class=""field_label"">" & label & "</div><div class=""field_wrap""><input class=""" & name & """ type=""text"" name=""" & name & """></div></div>");
  
  WebOutString("<div class=""field_descr"">" & descr & "</div>");
  WebOutString("<div class=""clear""></div>");
  WebOutString("</div>");

  return;
end;

procedure ShowSMUEditField_Date(string label1,string label2,string label3,string name1,string name2,string descr)
begin

  WebOutString("<div class=""field_row smu_period"">");
  WebOutString("<div class=""field_col""><div class=""field_label"">" & label1 & "</div><div class='date_wrap'><div class=""field_label"">" & label2 & "</div><div class=""field_wrap""><input class=""" & name1 & """ type=""text"" name=""" & name1 & """></div></div>");
  WebOutString("<div class='date_wrap'><div class=""field_label"">" & label3 & "</div><div class=""field_wrap""><input class=""" & name2 & """ type=""text"" name=""" & name2 & """></div></div></div>");
  
  WebOutString("<div class=""field_descr"">" & descr & "</div>");
  WebOutString("<div class=""clear""></div>");
  WebOutString("</div>");

  return;
end;


procedure ShowSMUTextArea(string label,string name,string descr,string extra)
begin

  WebOutString("<div class=""field_row"">");
  WebOutString("<div class=""field_col""><div class=""field_label"">" & label & "</div><div class=""field_wrap""><textarea class=""" & name & """ name=""" & name & """ " & extra & "></textarea></div></div>");
  
  WebOutString("<div class=""field_descr"">" & descr & "</div>");
  WebOutString("<div class=""clear""></div>");
  WebOutString("</div>");
  
  return;
end;

global
procedure ShowFinancialTable(string id,Boolean showwrapf)
begin

  if (showwrapf) then begin
    WebOutString("        <div class=""profile table-salary smu-border"">");
  end;
  WebOutString("<div id='cost_table_wrap'>");
  WebOutString("<div class='table_header'>" & ToolWebNGTranslateText2(80084) & "</div>");
  if (showwrapf) then begin
    WebOutString("<div class='field_descr'>" & ToolWebNGTranslateText2(80088) & "</div>");
  end;
  WebOutString("<div id='temp_table_wrap'><div class='table_field_wrap'>");
  WebOutString("<div class='table_field itemname'><div class='table_field_label'>" & ToolWebNGTranslateText2(80085) & "</div><input type='text'></div>");
  WebOutString("<div class='table_field itemprice'><div class='table_field_label'>" & ToolWebNGTranslateText2(80086) & "</div><input type='text'></div>");
  WebOutString("<div class='table_field costprice'><div class='table_field_label'>" & ToolWebNGTranslateText2(80087) & "</div><input type='text' readonly></div></div>");
  
  WebOutString("            <table id=""" & id & """ cellspacing='0'>");
  WebOutString("                <thead>");
  WebOutString("                <tr>");
  WebOutString("                    <th class='hidden'></th>");
  WebOutString("                    <th colspan=""2"">" & ToolWebNGTranslateText2(80031) & "</th>");//
  WebOutString("                    <th colspan=""2"">" & ToolWebNGTranslateText2(80032) & "</th>");
  //WebOutString("                    <th>" & ToolWebNGTranslateText2(80033) & "</th>");
  //WebOutString("                    <th>" & ToolWebNGTranslateText2(80034) & "</th>");
  WebOutString("                </tr>");
  WebOutString("                <tr>");
  WebOutString("                    <th class='hidden'></th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80035) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80036) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80037) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80038) & "</th>");
//  WebOutString("                    <th>" & ToolWebNGTranslateText2(80039) & "</th>");
//  WebOutString("                    <th>" & ToolWebNGTranslateText2(80040) & "</th>");
  WebOutString("                </tr>");
  WebOutString("                </thead>");
  WebOutString("                <tbody>");
  WebOutString("                <tr>");
  WebOutString("                    <td class='hidden'></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
//  WebOutString("                    <td colspan='2' class='inactive'></td>");
  //WebOutString("                    <td></td>");
  WebOutString("                </tr>");
  WebOutString("                </tbody>");
  WebOutString("                <tfoot>");
  WebOutString("                <tr>");
  WebOutString("                    <td class='hidden'></td>");
  WebOutString("                    <td>" & ToolWebNGTranslateText2(80041) & "</td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td>" & ToolWebNGTranslateText2(80041) & "</td>");
  WebOutString("                    <td></td>");
//  WebOutString("                    <td></td>");
  WebOutString("                </tr>");
  WebOutString("                </tfoot>");
  WebOutString("            </table>");
  WebOutString("<div class='clear'></div></div></div>");
  if (showwrapf) then begin
    WebOutString("        <div id='add_item_button' class='spbutton'>" & ToolWebNGTranslateText2(80083) & "</div></div>");
  end;

  return;
end;


global
procedure ShowEventTable(string id,Boolean showwrapf)
begin
  Integer i;
  
  //id=finplan_table

  if (showwrapf) then begin
    WebOutString("        <div class=""profile table-plan smu-border"">");
  end;
  WebOutString("<div class='table_header'>" & ToolWebNGTranslateText2(80066) & "</div>");
  WebOutString("            <table id=""" & id & """ cellspacing='0'>");
  WebOutString("                <thead>");
  WebOutString("                <tr>");
  WebOutString("                    <th></th>");//dummy column for ordering
  WebOutString("                    <th></th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80067) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80060) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80061) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80062) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80063) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80064) & "</th>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80065) & "</th>");
  WebOutString("                </tr>");
  WebOutString("                </thead>");
  WebOutString("                <tbody>");
  WebOutString("                <tr>");
  WebOutString("                    <td></td>");//dummy column for ordering
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                </tr>");
  WebOutString("                </tbody>");
  WebOutString("                <tfoot>");
  WebOutString("                <tr>");
  WebOutString("                    <td colspan='6'>" & ToolWebNGTranslateText2(80068) & "</td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                </tr>");
  WebOutString("                </tfoot>");
  WebOutString("            </table>");
  WebOutString("<select style='display:none' id='eventlist'>");
  for (i=0;i<5;i=i+1) begin
    WebOutString("<option value='" & i & "'>" & StringFromSet(3000,i) & "</option>");
  end;  
  WebOutString("</select>");
  if (showwrapf) then begin
    WebOutString("        </div>");
  end;
 


  return;
end;

procedure ShowSMUIndustries(string label,string name,string descr)
begin
  record JALIndustryBlock JIb;
  row JALIndustryBlock JIbrw;
  Integer i,rwcnt;

   WebOutString("<div class=""field_row"">");
  WebOutString("<div class=""field_col""><div class=""field_label"">" & label & "</div><div class=""field_wrap"">");
  
  WebOutString("<select class=""" & name & """ name=""" & name & """><option></option>");
  BlockLoad(JIb);
  rwcnt = MatRowCnt(JIb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JIb,i,JIbrw);
    WebOutString("<option value='" & JIbrw.Industry & "'>" & JIbrw.Industry & "</option>");
  end;

  WebOutString("</select>");  
  WebOutString("</div></div><div class=""field_descr"">" & descr & "</div>");
  WebOutString("<div class=""clear""></div>");
  WebOutString("</div>");

  return;
end;

procedure ShowSMUEducation(string label,string name,string descr)
begin
  Integer i,rwcnt;

  WebOutString("<div class=""field_row"">");
  WebOutString("<div class=""field_col""><div class=""field_label"">" & label & "</div><div class=""field_wrap"">");
  
  WebOutString("<select class=""" & name & """ name=""" & name & """><option></option>");
  for (i=1;i<4;i=i+1) begin
    WebOutString("<option value='" & i & "'>" & StringFromSet(3001,i) & "</option>");
  end;

  WebOutString("</select>");  
  WebOutString("</div></div><div class=""field_descr"">" & descr & "</div>");
  WebOutString("<div class=""clear""></div>");
  WebOutString("</div>");

  return;
end;


procedure ShowSMUBasicSection()
begin

  WebOutString("<div class=""profile smu_basic_info smu-border"">");
  WebOutString("<div class=""smu_top""><div class=""back_button_wrap""><a class=""spbutton profile_back"" href=""/profilePupil"">" & ToolWebNGTranslateText2(80022) & "</a></div><div class=""profile_header"">" & ToolWebNGTranslateText2(80023) & "</div></div>");
  ShowSMUEditField(ToolWebNGTranslateText2(80010),"smu_name",ToolWebNGTranslateText2(80011));
  ShowSMUTextArea(ToolWebNGTranslateText2(80012),"smu_descr",ToolWebNGTranslateText2(80013)," maxlength='300'");
  ShowSMUIndustries(ToolWebNGTranslateText2(80014),"smu_items",ToolWebNGTranslateText2(80015));
  ShowSMUEditField_Date(ToolWebNGTranslateText2(80016),"Sakums","Beigas","smu_period_start","smu_period_end",ToolWebNGTranslateText2(80017));
  ShowSMUEducation(ToolWebNGTranslateText2(80018),"smu_education",ToolWebNGTranslateText2(80019));
  ShowSMUTextArea(ToolWebNGTranslateText2(80020),"smu_targetaud",ToolWebNGTranslateText2(80021)," maxlength='300'");
  WebOutString("</div>");

  return;
end;

procedure OutputJopPositionOptions()
begin
  record JALJobPositionBlock JPb;
  row JALJobPositionBlock JPbrw;
  Integer i,rwcnt;
  
  BlockLoad(JPb);
  rwcnt = MatRowCnt(JPb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JPb,i,JPbrw);
    WebOutString("<option value='" & JPbrw.JobPosition & "'>" & JPbrw.JobPosition & "</option>");
  end;

  return;
end;

global
procedure ShowEmpSection(Boolean framef)
begin

  if (framef) then begin
    WebOutString("        <div class=""profile table-emps smu-border""><div class='emp_content'>");
  end;
  WebOutString("            <table id=""emplist-table"">");
  WebOutString("                <thead>");
  WebOutString("                <tr>");
  WebOutString("                    <th>" & ToolWebNGTranslateText2(80024) & "</th>");
  WebOutString("                    <th >" & ToolWebNGTranslateText2(80025) & "</th>");
  WebOutString("                    <th colspan=2>" & ToolWebNGTranslateText2(80081) & "</th>");
  WebOutString("                </tr>");
  WebOutString("                </thead>");
  WebOutString("                <tbody>");
  WebOutString("                <tr>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td></td>");
  WebOutString("                    <td>" & ToolWebNGTranslateText2(80026) & "</td>");
  WebOutString("                </tr>");
  WebOutString("                </tbody>");
  WebOutString("            </table>");
  
  WebOutString("<div class='newEmp_button'><a class='spbutton'>" & ToolWebNGTranslateText2(80027) & "</a></div>");
  WebOutString("<div class='newEmp_form'>");
  WebOutString("<select name='nemp' class='nemp_code'>");
  WebOutString("<option value=''>" & ToolWebNGTranslateText2(80004) & "</div>");
  WebOutString("</select>");
  WebOutString("<select name='nemp_position' class='nemp_pos'>");
  WebOutString("<option value=''>" & ToolWebNGTranslateText2(80080) & "</div>");
  OutputJopPositionOptions;
  WebOutString("</select>");
  WebOutString("<div class='newEmp_button_submit'><a class='spbutton'>" & ToolWebNGTranslateText2(80028) & "</a></div>");
  
  WebOutString("</div></div>");
  if (framef) then begin
    WebOutString("<div class='field_descr'>" & ToolWebNGTranslateText2(80029) & "</div><div class='field_descr'>" & ToolWebNGTranslateText2(80030) & "</div>");
  end;
  
  WebOutString("<div class='clear'></div>");
  if (framef) then begin
    WebOutString("        </div>");  
  end;

  return;
end;


global
procedure ShowSMUEditPage()
begin

  OutPutJALWebTexts(0);
  ShowSMUBasicSection;
  ShowEmpSection(true);
  ShowFinancialTable("findata_table",true);
  ShowEventTable("finplan_table",true);;
  
  WebOutString("<div class='smu_submit_wrap'>");
  WebOutString("<div class='smu_submit'><a class='spbutton save_only' href='#'>" & ToolWebNGTranslateText2(80042) & "</a></div>");
  WebOutString("<div class='smu_submit'><a class='spbutton save_submit' href='#'>" & ToolWebNGTranslateText2(80043) & "</a></div>");
  WebOutString("</div>")
  
  return;
end;

procedure GetActiveEmpApplications(string smfcode,var Integer cnt)
begin
  record JALTeacherAccVc JTr;
  Boolean TrHs;
  record CUVc CUr;

  TrHs = true;
  JTr.SMFCode = smfcode;
  JTr.StatusFlag = 0;
  while (LoopKey("SMFStatus",JTr,2,TrHs)) begin
    if (JTr.SMFCode!=smfcode or JTr.StatusFlag!=0) then begin
      TrHs = false;
    end else begin
      if (JTr.RecType==2) then begin
        CUr.Code = JTr.RecCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (cnt>1) then begin
            WebOutString(",");
          end;
          WebOutString("{""Code"":""" & CUr.Code & """,");
          WebOutString("""Name"":""" & CUr.Name & """,");
          WebOutString("""type"":""1"",");
          WebOutString("""eMail"":""" & CUr.eMail & """,");
          WebOutString("""JobDesc"":""" & CUr.JobDesc & """}");
        end;
      end;
    end;
  end;

  return;
end;

global
procedure GetEmpList(record SMFVc SMFr)
begin
  record CUVc CUr;
  record RLinkVc RLr;
  Integer i;
  
  WebOutString("""emplist"":[");
  i = 1;
  while (ReadRecordLink(SMFr,i,CUr,RLr)) begin
    if (i>1) then begin
      WebOutString(",");
    end;
    WebOutString("{""Code"":""" & CUr.Code & """,");
    WebOutString("""Name"":""" & CUr.Name & """,");
    WebOutString("""type"":""0"",");
    WebOutString("""eMail"":""" & CUr.eMail & """,");
    WebOutString("""JobDesc"":""" & CUr.JobDesc & """,");
    WebOutString("""Salary"":""" & CUr.Salary & """}");
    i = i + 1;
  end;
  GetActiveEmpApplications(SMFr.SMFCode,i);
  WebOutString("],"); 

  return;
end;

global
procedure GetFinData(record SMFVc SMFr)
begin
  record FCSMUVc FCr;
  row FCSMUVc FCrw;
  record EventTurnoverVc ETr;
  row EventTurnoverVc ETrw;
  Integer rwcnt,i,j,k,cnt;
  Boolean TrHs,foundf;
  string 255 c,s;
  vector Boolean vItems;
  vector string 255 vItemName;
  array string 255 arr;

  WebOutString("""FinData"":{");
  
  TrHs = true;
  FCr.SMUCode = SMFr.SMFCode;
  j = 0;
  WebOutString("""materials"":[");
  while (LoopMain(FCr,1,TrHs)) begin
    if (FCr.SMUCode!=SMFr.SMFCode) then begin
      TrHs = false;
    end else begin
      if (j>0) then begin
        WebOutString(",");
      end;
      j = j + 1;
      cnt = 0;
      vItems[FCr.ItemName] = false;
      vItemName[FCr.ItemName] = FCr.ItemName;
      WebOutString("{""ItemName"":""" & FCr.ItemName & """,");
      WebOutString("""Price"":""" & FCr.Price & """,");
      WebOutString("""costs"":[");
      rwcnt = MatRowCnt(FCr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(FCr,i,FCrw);
        if (cnt>0) then begin
          WebOutString(",");
        end;
        cnt = cnt + 1;
        WebOutString("{");
        WebOutString("""type"":""0"",");
        WebOutString("""ProdName"":""" & FCrw.ProdName & """,");
        WebOutString("""UCost"":""" & FCrw.UCost & """");
        WebOutString("}");
      end;
      for (i=0;i<3;i=i+1) begin
        c = GetFieldValueByName(FCr,"contact" & (i+1),-1);
        s = GetFieldValueByName(FCr,"salary" & (i+1),-1);
        if (nonblank(c)) then begin
          if (cnt>0) then begin
            WebOutString(",");
          end;
          cnt = cnt + 1;
          WebOutString("{");
          WebOutString("""type"":""1"",");
          WebOutString("""code"":""" & c & """,");
          WebOutString("""salary"":""" & s & """");
          WebOutString("}");
        end;
      end;
      WebOutString("]}");
    end;
  end;
  WebOutString("],");
  j = 0;
  TrHs = true;
  ETr.SMUCode = SMFr.SMFCode;
  WebOutString("""eventturnover"":[");
  while (LoopMain(ETr,1,TrHs)) begin
    if (ETr.SMUCode!=SMFr.SMFCode) then begin
      TrHs = false;
    end else begin
      foundf = true;
      if (j>0) then begin
        WebOutString(",");
      end;
      j = j + 1;
      vItems[ETr.ItemName] = true;
      WebOutString("{""ItemName"":""" & ETr.ItemName & """,");
      WebOutString("""turnover"":[");
      rwcnt = MatRowCnt(ETr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ETr,i,ETrw);
        if (i>0) then begin
          WebOutString(",");
        end;
        WebOutString("{");
        WebOutString("""EventName"":""" & StringFromSet(3000,ETrw.EventType) & """,");
        WebOutString("""EventID"":""" & ETrw.EventType & """,");
        WebOutString("""UCost"":""" & ETrw.UCost & """,");
        WebOutString("""UPrice"":""" & ETrw.UPrice & """,");
        WebOutString("""SoldUnits"":""" & ETrw.SoldUnits & """,");
        WebOutString("""Income"":""" & ETrw.Income & """,");
        WebOutString("""Costs"":""" & ETrw.Costs & """,");
        WebOutString("""Profit"":""" & ETrw.Profit & """");
        WebOutString("}");
      end;
      WebOutString("]}");
    end;
  end;
  /*we'll do it in javascript
  GetVectorTags(vItems,arr);
  for (k=0;k<arr.length;k=k+1) begin
    if (vItems[arr[k]]==false) then begin
      if (j>0) then begin
        WebOutString(",");
      end;
      j = j + 1;
      WebOutString("{""ItemName"":""" & vItemName[arr[k]] & """,");
      WebOutString("""turnover"":[");
      for (i=0;i<5;i=i+1) begin
        if (i>0) then begin
          WebOutString(",");
        end;
        WebOutString("{");
        WebOutString("""EventName"":""" & StringFromSet(3000,i) & """,");
        WebOutString("""EventID"":""" & i & """,");
        WebOutString("""UCost"":"""",");
        WebOutString("""UPrice"":"""",");
        WebOutString("""SoldUnits"":"""",");
        WebOutString("""Income"":"""",");
        WebOutString("""Costs"":"""",");
        WebOutString("""Profit"":""""");
        WebOutString("}");
      end;
      WebOutString("]}");
    end;
  end;
  */
  WebOutString("]");


  WebOutString("},");

  return;
end;

procedure GetFinPlan(record SMFVc SMFr)
begin

  WebOutString("""FinPlan"":{");
  
  WebOutString("}");
  return;
end;

function Boolean EmpNotAddedAlready(string custcode,string smfcode)
begin
  Boolean res;
  record JALTeacherAccVc JTr;
  Boolean TrHs;

  TrHs = true;
  JTr.RecType = 2;
  JTr.StatusFlag = 0;
  JTr.RecCode = custcode;
  while (LoopKey("RecType",JTr,3,TrHs)) begin
    if (JTr.RecType!=2 or JTr.StatusFlag!=0 or JTr.RecCode!=custcode) then begin
      TrHs = false;
    end else begin
      if (JTr.SMFCode==smfcode) then begin
        res = true;
        TrHs = false;
      end;
    end;
  end;
 
  EmpNotAddedAlready = res;
  return;
end;

global
procedure GetSchoolEmpList(string school,string smfcode)
begin
  Record CUVc CUr;
  record SchoolVc SCr;
  record RLinkVc RLr;
  record SMFVc SMFr;
  Integer cnt;
  
  WebOutString("""newemplist"":[");
  while (LoopMain(CUr,1,true)) begin
    if (CUr.Classification=="SKLN" and CUr.ConfirmTeach==1) then begin
/*
      if (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr)) then begin
				if (SMFr.ReadyFlag==0) then begin
					if (ReadRecordLink(CUr,1,SCr,RLr)) begin					
						if (CUr.SchoolCode==school) then begin
						  if (cnt>0) then begin
						    WebOutString(",");
						  end;					
							WebOutString("{""Code"":""" & CUr.Code & """,""Name"":""" & CUr.Name & """}");
							cnt = cnt + 1;
						end;
					end;
				end;
			end else begin
*/
        if (ReadRecordLink(CUr,1,SCr,RLr)) then begin
          if (SCr.SchoolCode==school) then begin
						if (!ReadRecordLink(CUr,1,SMFr,RLr)) then begin
              if (EmpNotAddedAlready(CUr.Code,smfcode)==false) then begin
                if (cnt>0) then begin
                  WebOutString(",");
                end;					
                WebOutString("{""Code"":""" & CUr.Code & """,""Name"":""" & CUr.Name & """}");
                cnt = cnt + 1;
              end;
						end;
					end;
				end;
//			end;	
    end;
  end;
  WebOutString("],");
  
  return;
end;


global webpublic
procedure WebGetSMUDataForEditing()
begin
  record CUVc CUr;
  record SMFVc SMFr;
  record RLinkVc RLr;
  Longint pos,i,j;
  string 255 tstr;

  WebOutString("{");
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr)) then begin
      WebOutString("""SMFCode"":""" & SMFr.SMFCode & """,");
      WebOutString("""SMFName"":""" & SMFr.SMFName & """,");
      WebOutString("""ActCU"":""" & (CurrentCust==SMFr.CustCode) & """,");
      WebOutString("""ProdSpec"":""" & SMFr.ProdSpec & """,");
      WebOutString("""TargetAud"":""" & SMFr.TargetAud & """,");
      WebOutString("""Education"":""" & SMFr.EducationType & """,");
      WebOutString("""ActDateStart"":""" & DateToString(SMFr.ActDateStart,"YYYY-MM-DD") & """,");
      WebOutString("""ActDateEnd"":""" & DateToString(SMFr.ActDateEnd,"YYYY-MM-DD") & """,");
      WebOutString("""ApprovalStatus"":""" & SMFr.ApprovalStatus & """,");
      WebOutString("""OldApprovalStatus"":""" & SMFr.OldApprovalStatus & """,");
      WebOutString("""Text"":""");
      for (i=0;i<SizeTextCnt(SMFr);i=i+200) begin
        tstr = StringFromText(SMFr,i,200);
        WebOutString(StrReplace(tstr,chr(13),"\\n"));
      end;
      WebOutString(""",");
      GetSchoolEmpList(SMFr.SchoolCode,SMFr.SMFCode);

      GetEmpList(SMFr);
      GetFinData(SMFr);
      GetFinPlan(SMFr);
    end;
  end;
  WebOutString("}");

  return;
end;

function Boolean IsEmployee(record CUVc CUr,record SMFVc SMFr)
begin
  Boolean res;
  record SMFVc tSMFr;
  record RLinkVc RLr;
  
  if (ReadRecordLink(CUr,1,tSMFr,RLr)) then begin
    if (tSMFr.SMFCode==SMFr.SMFCode) then begin
      res = true;
    end;
  end;

  IsEmployee = res;
  return;
end;

updating procedure RemoveSMUItems(string smucode)
begin
  record FCSMUVc FCr;
  Boolean TrHs;
  
  FCr.SMUCode = smucode;
  TrHs = true;
  while (LoopMain(FCr,1,TrHs)) begin
    if (FCr.SMUCode!=smucode) then begin
      TrHs = false;
    end else begin
      RecordRemove(FCr);
      StepBack(FCr);
    end;
  end;

  return;
end;

procedure SetupSMFItem(string smucode,string itemname,var record FCSMUVc FCr)
begin
  RecordClear(FCr);
  RecordNew(FCr);
  FCr.SMUCode = smucode;
  FCr.ItemName = itemname;
  return;
end;

updating procedure RemoveSMUTurnovers(string smucode)
begin
  record EventTurnoverVc ETr;
  Boolean TrHs;
  
  ETr.SMUCode = smucode;
  TrHs = true;
  while (LoopMain(ETr,1,TrHs)) begin
    if (ETr.SMUCode!=smucode) then begin
      TrHs = false;
    end else begin
      RecordRemove(ETr);
      StepBack(ETr);
    end;
  end;

  return;
end;

procedure SetupSMFTurnover(string smucode,string itemname,var record EventTurnoverVc ETr)
begin
  RecordClear(ETr);
  RecordNew(ETr);
  ETr.SMUCode = smucode;
  ETr.ItemName = itemname;
  return;
end;

function Boolean CheckSMFDates(record SMFVc SMFr,record SMFVc oldSMFr)
begin
  Boolean res;
  record JALSemesterBlock JSb;
  row JALSemesterBlock JSbrw;
  Integer i,rwcnt;

  res = true;
  if (blank(oldSMFr.ActDateStart) and nonblank(SMFr.ActDateStart)) then begin
    if (SMFr.ActDateStart<CurrentDate) then begin
      res = false;
      goto lout;
    end;
  end;
  if (nonblank(SMFr.ActDateStart)) then begin
    BlockLoad(JSb);
    rwcnt = MatRowCnt(JSb);
    res = false;
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(JSb,i,JSbrw);
      if (DateInRange(SMFr.ActDateStart,JSbrw.DateFrom,JSbrw.DateTo)) then begin
        if (DateInRange(SMFr.ActDateEnd,JSbrw.DateFrom,JSbrw.DateTo)) then begin 
          res = true;
          goto lout;
        end;
      end;
    end;
  end;

  
lout:;
  CheckSMFDates = res;
  return;
end;

function Boolean ValidateSMUData(record SMFVc SMFr,record SMFVc oldSMFr,var Integer errtype,var string errstr)
begin
  Boolean res;
  record SMFVc tSMFr;

  res = true;
  
  if (CheckSMFDates(SMFr,oldSMFr)==false) then begin
    res = false;
    errtype = 1;
    goto lout;
  end;
  tSMFr.SMFName = SMFr.SMFName;
  if (ReadFirstKey("SMFName",tSMFr,1,true)) then begin
    if (tSMFr.SMFCode!=SMFr.SMFCode) then begin
      errtype = 2;
      res = false;
      goto lout;
   end;
  end;

lout:;
  ValidateSMUData = res;
  return;
end;

function string 255 RemoveEndingLineBreaks(string tstr)
begin
  Integer i;
  string 255 res;
  Boolean testf;
  
  testf = true;
  res = tstr;
  while (testf) begin
    if (right(res,2)=="\\n") then begin
      res = left(res,len(res)-2);
    end else begin
      testf = false;
    end;
  end;

  RemoveEndingLineBreaks = res;
  return;
end;

procedure GetSMUEmpList(record SMFVc SMFr,var array string emplist)
begin
  record CUVc CUr;
  record RLinkVc RLr;
  Integer i;
  
  i = 1;
  while (ReadRecordLink(SMFr,i,CUr,RLr)) begin
   emplist[emplist.length] = CUr.Code;
    i = i + 1;
  end;

  return;
end;

global webpublic
updating procedure WebSaveSMUDataFromEditing()
begin
  record CUVc CUr,tCUr,oldCUr;
  record SMFVc SMFr,oldSMFr;
  json js;
  record FCSMUVc FCr;
  row FCSMUVc FCrw;
  record EventTurnoverVc ETr;
  row EventTurnoverVc ETrw;
  Integer i,j,errtype;
  string 255 root,errstr,tstr;
  record TeacherVc TCr;
  record JALClassBlock JALClassbl;
  vector string 255 vVals;
  record RLinkVc RLr;
  area a;
  Boolean updatef;
  record ReportMailBlock RMbl;
  array string 255 emplist;
   

  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr)) begin
      RecordCopy(oldSMFr,SMFr);
      updatef = true;
    end;
    if (updatef==false) then begin
      RecordNew(SMFr);
      FillNewSMUData(SMFr,CUr);
    end;
    if (SMFr.ApprovalStatus>0) then begin
      goto lend;
    end;
    WebGetRawPostData(a);
    js = ParseJSONArea(a);
    if (nonblank(JSONGet(js,"SMFName"))) then begin
      SMFr.SMFName = JSONGet(js,"SMFName");
      SMFr.ProdSpec = JSONGet(js,"ProdSpec");
      SMFr.TargetAud = JSONGet(js,"TargetAud");
      SMFr.EducationType = StringToInt(JSONGet(js,"Education"));
      SMFr.ActDateStart = DateFromString(JSONGet(js,"ActDateStart"),"YYYY-MM-DD");
      SMFr.ActDateEnd = DateFromString(JSONGet(js,"ActDateEnd"),"YYYY-MM-DD");
      tstr = RemoveEndingLineBreaks(JSONGet(js,"Text"));
      SetTextField(SMFr,tstr);
      if (ValidateSMUData(SMFr,oldSMFr,errtype,errstr)==false) then begin
        goto lend;
      end;
      RecordStore(SMFr,true);
      if (updatef==false) then begin
        BlockLoad(RMbl);
        GenMailForSMU("",USetStr(32344) & " - " & SMFr.SMFName,USetStr(32520),RMbl.SMUMail,SMFr,true,CUr,""); 
      end;
      i = 0;
      root = "FinData/materials/";
      RemoveSMUItems(SMFr.SMFCode);//Too harsh?
      while (JSONNodeExists(js,root & "[" & i  & "]")) begin
        SetupSMFItem(SMFr.SMFCode,JSONGet(js,root & "[" & i & "]/ItemName"),FCr);
        FCr.Price = StringToVal(JSONGet(js,root & "[" & i & "]/UPrice"),M4Val);
        j = 0;
        while (JSONNodeExists(js,root & "[" & i  & "]/costs/[" & j & "]")) begin
          ClearRow(FCr,FCrw,1);
          FCrw.UCost = StringToVal(JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/UCost"),M4Val);
          FCrw.ProdName = JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/ProdName");
          MatRowPut(FCr,j,FCrw);
          j = j + 1;
        end;
        j = 0;
        while (JSONNodeExists(js,root & "[" & i  & "]/emps/[" & j & "]")) begin
          ClearRow(FCr,FCrw,1);
          SetFieldValueByName(FCr,"contact" & (j+1),JSONGet(js,root & "[" & i & "]/emps/[" & j & "]/custcode"),-1);
          SetFieldValueByName(FCr,"salary" & (j+1),StringToVal(JSONGet(js,root & "[" & i & "]/emps/[" & j & "]/salary"),M4Val),-1);
          j = j + 1;
          if (j>3) then begin
            goto l33;
          end;
        end;
l33:;
        RecordStore(FCr,true);
        i = i + 1;
      end;
      i = 0;
      root = "FinData/eventturnover/";
      RemoveSMUTurnovers(SMFr.SMFCode);//Too harsh?
      while (JSONNodeExists(js,root & "[" & i  & "]")) begin
        SetupSMFTurnover(SMFr.SMFCode,JSONGet(js,root & "[" & i & "]/ItemName"),ETr);
        j = 0;
        while (JSONNodeExists(js,root & "[" & i  & "]/costs/[" & j & "]")) begin
          ClearRow(ETr,ETrw,1);
          ETrw.EventType = StringToInt(JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/EventID"));
          ETrw.UCost = StringToVal(JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/UCost"),M4Val);
          ETrw.UPrice = StringToVal(JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/UPrice"),M4Val);
          ETrw.SoldUnits = StringToVal(JSONGet(js,root & "[" & i & "]/costs/[" & j & "]/SoldUnits"),M4Val);
          ETrw.Income = ETrw.UPrice*ETrw.SoldUnits;
          ETrw.Costs = ETrw.UCost*ETrw.SoldUnits;
          ETrw.Profit = ETrw.Income-ETrw.Costs;
          MatRowPut(ETr,j,ETrw);
          j = j + 1;
        end;
        RecordStore(ETr,true);
        i = i + 1;
      end;
      if (JSONGet(js,"Approve")=="1") then begin
        GetSMUEmpList(SMFr,emplist);
        if (emplist.length<2 or emplist.length>5) then begin
          errtype = 3;
          goto lend;
        end;
        //CreateUniqueTeachApp(0,SMFr.SMFCode,CUr.TeacherCode);
        if (ReadFirstMain(SMFr,1,true)) then begin
          RecordCopy(oldSMFr,SMFr);
          SMFr.ApprovalStatus = 1;
          if (RecordUpdate(oldSMFr,SMFr,true)==0) then begin
            TCr.TeacherCode = CUr.TeacherCode;
            if (ReadFirstMain(TCr,1,true)) then begin
              tCUr.Code = TCr.CustCode;
              if (ReadFirstMain(tCUr,1,true)) then begin
                BlockLoad(JALClassbl);
                vVals["custcode"] = CUr.Code;
                vVals["smucode"] = SMFr.SMFCode;
                vVals["link"] = "http://jal.lv/teacher-smu";
                SendJALEmail(vVals,JALCLassbl.TeacherRequestText2,tCUr.eMail);        
              end;
            end;
          end;
        end;
      end;
    end else begin
    end;
  end;

lend:;
  if (errtype>0) then begin
    WebOutString("{\"errtype\":\"" & errtype & "\"}");  
  end else begin
    WebOutString("{\"ok\":\"\"}");
  end;
  
  return;
end;

global
function Boolean ContactsFromSameSMU(record CUVc CUr,record CUVc tCUr)
begin
  record SMFVc SMFr,tSMFr;
  record RLinkVc RLr;
  Boolean res;

  if (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr)) then begin
    if (ReadRecordLink(tCUr,1,tSMFr,RLr) or FindSMURecord(tCUr.Code,tSMFr)) then begin
      if (nonblank(SMFr.SMFCode) and SMFr.SMFCode==tSMFr.SMFCode) then begin
        res = true;
      end;
    end;
  end;

  ContactsFromSameSMU = res;
  return;
end;

global webpublic
updating procedure WebSetEmpPosition()
begin
  record CUVc CUr,tCUr,oldCUr;
  
 	CUr.Code = CurrentCust;
  if ReadFirstMain(CUr,1,true) begin
    tCUr.Code = WebGetArg("emp");
    if (ReadFirstMain(tCUr,1,true)) then begin
      if (ContactsFromSameSMU(CUr,tCUr)) then begin
        RecordCopy(oldCUr,tCUr);
        tCUr.JobDesc = WebGetArg("njob");
        RecordUpdate(oldCUr,tCUr,true);
      end;
    end;
  end;

  return;
end;
