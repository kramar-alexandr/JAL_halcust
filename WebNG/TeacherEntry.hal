external function string 255 toolwebngtranslatetext(integer);
external function string 255 FormatSimpleLink(string,boolean);
external procedure ShowRedirectHtml(string,boolean);
external procedure ExtractObj(string,var Integer,var string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function Boolean FindSMURecord(string,var record SMFVc);
external procedure ShowFinancialTable(string,Boolean);
external procedure ShowEventTable(string,Boolean);
external function string 255 ToolWebNGTranslateText2(longint);
external procedure GetFinData(record SMFVc);
external procedure GetEmpList(record SMFVc);
external function string 255 StrReplace(string,string,string);
forward procedure GetTeacherSMUApplications(string,var Integer,Boolean);
external procedure GetSchoolEmpList(string,string);
external procedure ShowWebElement(string);
external function Boolean StudentTooOld(string);

global
function string 255 FormatJSONString(string tstr)
begin
  string 255 res;
  
  res = StrReplace(tstr,"\"","\\\"");
  res = StrReplace(res,chr(13) & chr(10),"\\n");//chr(13) & 
  res = StrReplace(res,chr(10),"\\n");//chr(13) & 

  FormatJSONString = res;
  return;
end;

global
function string 255 UnFormatJSONString(string tstr)
begin
  string 255 res;
 
  res = StrReplace(tstr,"\\\"","\"");

  UnFormatJSONString = res;
  return;
end;

global
function string 50 GetEntryPersonName(record JALTeacherAccVc JTr)
begin
  record TeacherVc TCr;
  record MentorVc MTr;
  string 50 res;

  res = "";

  switch JTr.RecType begin
    case 0: 
            TCr.TeacherCode = JTr.RecCode;
            if readfirstmain(TCr,1,true) then begin
              res = TCr.TeacherName;
            end;
    case 1: 
            MTr.MentorCode = JTr.RecCode;
            if readfirstmain(MTr,1,true) then begin
              res = MTr.MentorName;
            end;
  end;
  
GetEntryPersonName = res;
return;
end;

function boolean EntryExists(string scode,string rcode,integer type,integer status)
begin
  boolean res,TrHs;
  record JALTeacherAccVc JTr;

  res = false;

    ResetLoop(JTr);
    JTr.StatusFlag = status;
    JTr.RecType= type;
    JTr.RecCode = rcode;
    TrHs = true;
    while loopkey("RecType",JTr,3,TrHs) begin
      if JTr.StatusFlag <> status or JTr.RecType <> type or JTr.RecCode <> rcode then begin
        TrHs = false;
      end else begin
        if JTr.SMFCode == scode then begin
          res = true;
          TrHs = false;
        end;
      end;
    end;


EntryExists = res;
return;
end;

procedure OutputSingleEntryLineSMF(record JALTeacherAccVc JTr)
begin

    WebOutStringFormatNL("<div class='entry_item'>");
    WebOutStringFormatNL("<div class='entry_line'>");
    WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26121) & "</div><div class='entry_name_text'>" & GetEntryPersonName(JTr) & "</div></div>");
    WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26120) & "</div><div class='entry_name_text'>" & ToolWebNGTranslateText(26110+JTr.StatusFlag) & "</div></div>");
    WebOutStringFormatNL("</div>");
    WebOutStringFormatNL("<div class='entry_line'>");
    WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26122) & "</div><div class='entry_name_text'>" & JTr.TransDate & ";" & JTr.TransTime & "</div></div>");          
    WebOutStringFormatNL("</div>");
    WebOutStringFormatNL("</div>");


return;
end;

function string 255 GetSMFName(string code)
begin
  record SMFVc SMFr;
  record CUVc CUr;
  string 255 res;

  res = "";

  SMFr.SMFCode = code;
  if readfirstmain(SMFr,1,true) then begin
    res = SMFr.SMFName;
    CUr.Code = SMFr.CustCode;
    if readfirstmain(CUr,1,true) then begin
      res = res & "(" & CUr.Name & ")";
    end;
  end;

  GetSMFName = res;

return;
end;

procedure OutputSingleEntryLine(record JALTeacherAccVc JTr,integer type,integer status)
begin
  string 255 name;

  name = GetSMFName(JTr.SMFCode);
  
  switch status begin //0-new,1-accepted,2-declined
    case 0:
          WebOutStringFormatNL("<div class='entry_item'>");
          WebOutStringFormatNL("<div class='entry_info'>");
          WebOutStringFormatNL("<div class='entry_line'>");
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26123) & "</div><div class='entry_name_text'>" & name & "</div></div>");
          WebOutStringFormatNL("</div>");          
          WebOutStringFormatNL("<div class='entry_line'>");          
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26120) & "</div><div class='entry_name_text'>" & ToolWebNGTranslateText(26110+JTr.StatusFlag) & "</div></div>");
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("<div class='entry_line'>");
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26122) & "</div><div class='entry_name_text'>" & JTr.TransDate & ";" & JTr.TransTime & "</div></div>");          
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("<div class='entry_form'>");
          WebOutStringFormatNL("<form action='/WebJALChangeEntryStat.hal' method='POST'>");
          WebOutStringFormatNL("<input type='hidden' name='sernr' value='" & JTr.SerNr & "'>");
          WebOutStringFormatNL("<input type='hidden' name='type' value='" & type & "'>");
          WebOutStringFormatNL("<input type='hidden' name='val' value='1'>");
          WebOutStringFormatNL("<input type='hidden' name='path' value='" & webgetarg("path") & "'>");
          WebOutStringFormatNL("<input type='submit' value='" & ToolWebNGTranslateText(26115) & "'>");
          WebOutStringFormatNL("</form>");
          WebOutStringFormatNL("<form action='/WebJALChangeEntryStat.hal' method='POST'>");
          WebOutStringFormatNL("<input type='hidden' name='sernr' value='" & JTr.SerNr & "'>");
          WebOutStringFormatNL("<input type='hidden' name='type' value='" & type & "'>");
          WebOutStringFormatNL("<input type='hidden' name='val' value='2'>");
          WebOutStringFormatNL("<input type='hidden' name='path' value='" & webgetarg("path") & "'>");
          WebOutStringFormatNL("<input type='submit' value='" & ToolWebNGTranslateText(26116) & "'>");
          WebOutStringFormatNL("</form>");
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("</div>");
    otherwise
          WebOutStringFormatNL("<div class='entry_item'>");
          WebOutStringFormatNL("<div class='entry_line'>");
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26123) & "</div><div class='entry_name_text'>" & name & "</div></div>");
          WebOutStringFormatNL("</div>");          
          WebOutStringFormatNL("<div class='entry_line'>");          
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26120) & "</div><div class='entry_name_text'>" & ToolWebNGTranslateText(26110+JTr.StatusFlag) & "</div></div>");
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("<div class='entry_line'>");
          WebOutStringFormatNL("<div class='entry_name'><div class='entry_name_label'>" & ToolWebNGTranslateText(26122) & "</div><div class='entry_name_text'>" & JTr.TransDate & ";" & JTr.TransTime & "</div></div>");          
          WebOutStringFormatNL("</div>");
          WebOutStringFormatNL("</div>");

  end;

return;
end;

function boolean SMFHasTeacher(string code,string tc,integer type)
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  integer i,rwcnt;
  boolean res;

  res = false;

  SMFr.SMFCode = code;
  if readfirstmain(SMFr,1,true) then begin
    rwcnt = MatRowCnt(SMFr);
    for (i = 0; i < rwcnt;i = i + 1) begin
      MatRowGet(SMFr,i,SMFrw);
      if SMFrw.Type == type and SMFrw.Code == tc then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;

  SMFHasTeacher = res;
return;
end;

procedure ShowTeacherSelectBox(string code)
begin
  record TeacherVc TCr;
  record JALTeacherAccVc JTr;
  boolean TrHs,foundf;

  WebOutStringFormatNL("<select name='code'>");
  WebOutStringFormatNL("<option value=''>" & ToolWebNGTranslateText(26100) & "</option>");
  while loopmain(TCr,1,true) begin
    if (!EntryExists(code,TCr.TeacherCode,0,0) and !EntryExists(code,TCr.TeacherCode,0,1)) and !SMFHasTeacher(code,TCr.TeacherCode,0) then begin
      WebOutStringFormatNL("<option value='" & TCr.TeacherCode & "'>" & TCr.TeacherName & "</option>");
    end;
  end;

  WebOutStringFormatNL("</select>");

return;
end;

procedure ShowMentorSelectBox(string code)
begin
  record MentorVc MTr;
  record JALTeacherAccVc JTr;
  boolean TrHs,foundf;
  string 20 cc;

  WebOutStringFormatNL("<select name='code'>");
  WebOutStringFormatNL("<option value=''>" & ToolWebNGTranslateText(26101) & "</option>");
  while loopmain(MTr,1,true) begin
    if (!EntryExists(code,MTr.MentorCode,1,0) and !EntryExists(code,MTr.MentorCode,1,1)) and !SMFHasTeacher(code,MTr.MentorCode,1) then begin
      WebOutStringFormatNL("<option value='" & MTr.MentorCode & "'>" & MTr.MentorName & "</option>");
    end;
  end;

  WebOutStringFormatNL("</select>");

return;
end;


procedure ShowSMFEntryForm(integer type,record SMFVc SMFr)
begin

 WebOutStringFormatNL("<div class='entry_section'>");
 WebOutStringFormatNL("<div class='entry_section_title'>" & ToolWebNGTranslateText(26155 + type) & "</div>");


 WebOutStringFormatNL("<div class='entryform_" & type & "'>");
 WebOutStringFormatNL("<form action='/WebJALSendEntry.hal' method='POST'>");
 WebOutStringFormatNL("<input type='hidden' name='type' value='" & type & "'>");
 WebOutStringFormatNL("<input type='hidden' name='path' value='" & webgetarg("path") & "'>");
 switch type begin
    case 0: ShowTeacherSelectBox(SMFr.SMFCode);
    case 1: ShowMentorSelectBox(SMFr.SMFCode);
 end;
 WebOutStringFormatNL("<input type='submit' value='" & ToolWebNGTranslateText(26105) & "'>");
 WebOutStringFormatNL("</form>");
 WebOutStringFormatNL("</div>");
 WebOutStringFormatNL("</div>");


return;
end;

global webpublic updating procedure WEBJALCreateNewTaskOne()//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 18:01 20.08.2018
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  string 20 code;
  integer i;
  record ActVc Actr;
  area PostData;
  json datajson;
  record SmuNewActBlock ANAB;
  
  Blockload(ANAB);
  if(WebLoginStatus==3)then begin
    code = webgetarg("sernr");
    if(nonblank(code))then begin
      SMFr.SMFCode = code;
      if(readfirstmain(SMFr,1,true))then begin
        RecordNew(Actr);
        Actr.Comment = ANAB.ActText;
        Actr.ActType = ANAB.ActType;
        Actr.CUCode = ANAB.ActPerson;
        if(RecordStore(Actr,true)) then begin
          CreateRecordLink(Actr,CurrentCompany,SMFr,CurrentCompany);
          CreateRecordLink(SMFr,CurrentCompany,Actr,CurrentCompany);
          weboutstring("{\"result\":\"OK\"}");
        end else begin
          weboutstring("{\"result\":\"ERROR\"}");
        end;
      end;
    end;
  end;
  return;
end;

global webpublic updating procedure WEBJALCreateNewTaskMass()//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 18:01 20.08.2018
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  string 20 code;
  integer i;
  record ActVc Actr;
  area PostData;
  json datajson;
  record SmuNewActBlock ANAB;

  Blockload(ANAB);
  if(WebLoginStatus==3)then begin
    WebGetPostData(PostData);
    WebOutArea(PostData);
    datajson = ParseJsonArea(PostData);
    logtext(0, JSONCountChildren(datajson,"root"));
    for(i=0;i<JSONCountChildren(datajson,"root");i=i+1) begin
      code = JSONGet(datajson,"root[0]/["  & i & "]/serNr");
      if(nonblank(code))then begin
        SMFr.SMFCode = code;
        if(readfirstmain(SMFr,1,true))then begin
          RecordNew(Actr);
          Actr.Comment = ANAB.ActText;
          Actr.ActType = ANAB.ActType;
          Actr.CUCode = ANAB.ActPerson;
          if(RecordStore(Actr,true)) then begin
            CreateRecordLink(Actr,CurrentCompany,SMFr,CurrentCompany);
            CreateRecordLink(SMFr,CurrentCompany,Actr,CurrentCompany);
            weboutstring("{\"result\":\"OK\"}");
          end else begin
            weboutstring("{\"result\":\"ERROR\"}");
          end;
        end;
      end;
    end;
  end;
  return;
end;

global webpublic updating procedure WEBJALTeacherAccChangeStatus()
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  boolean testf;
  integer i,mtrw,cnt;
  string 50 code,status,type;
  record JALTeacherAccVc JTr,oldJTr;
  boolean TrHs;
  string 20 newstat,sernr;

  if(WebLoginStatus==3)then begin
    sernr = webgetarg("sernr");
    newstat = webgetarg("status");
    
    if(nonblank(sernr) and nonblank(newstat))then begin

      JTr.SerNr = StringToLongint(sernr);//veeeery bad security

      if (ReadFirstMain(JTr,1,true))then begin

        if(stringtoint(newstat)>0 and stringtoint(newstat)<3)then begin

          if(JTr.StatusFlag!=stringtoint(newstat))then begin
            RecordCopy(oldJTr,JTr);
            JTr.StatusFlag = stringtoint(newstat);
            if(recordUpdate(oldJTr,JTr,true)==0) then begin
              logtext(0, "save");
              SMFr.SMFCode = JTr.SMFCode;
              ReadFirstMain(SMFr,1,true);
              SMFr.StatusFlag = 1;
              RecordStore(SMFr,true);
              weboutstring("{\"result\":\"OK\"}");
            end else begin
              logtext(0, "not saved");
              weboutstring("{\"result\":\"ERROR\"}");
            end;  
          end else begin 
            logtext(0, "already done");
            weboutstring("{\"result\":\"Ok\"}");
          end;
        end else begin
          logtext(0, "wrong stat");
          weboutstring("{\"result\":\"Error\"}");
        end;
      end else begin

        weboutstring("{\"result\":\"Error JTr\"}");
      end;
    end else begin

      weboutstring("{\"result\":\"Error params\"}");
    end;
  end else begin

    weboutstring("{\"result\":\"Error Login\"}");
  end;
  

return;
end;

function Boolean FindTeacherRecord(string custcode,var string teachercode)
begin
  Boolean res;
  record TeacherVc TCr;
  
  TCr.CustCode = custcode;
  if (ReadFirstKey("CustCode",TCr,1,true)) then begin
    teachercode = TCr.TeacherCode;
    res = true;
  end;


  FindTeacherRecord = res;
  return;
end;

procedure GetSMUSemester(record SMFVc SMFr,var string semstr,var Date sd,var Date ed)
begin
  record JALSemesterBlock JSb;
  row JALSemesterBlock JSbrw;
  Integer i,rwcnt;

  BlockLoad(JSb);
  rwcnt = MatRowCnt(JSb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JSb,i,JSbrw);
    if (DateInRange(SMFr.ActDateStart,JSbrw.DateFrom,JSbrw.DateTo)) then begin
      i = rwcnt;
      sd = JSbrw.DateFrom;
      ed = JSbrw.DateTo;
      semstr = JSBrw.YearStr;
    end;
  end;

  return;
end;

procedure GetSemesterDate(string semstr,var Date sd,var Date ed)
begin
  record JALSemesterBlock JSb;
  row JALSemesterBlock JSbrw;
  Integer i,rwcnt;

  BlockLoad(JSb);
  rwcnt = MatRowCnt(JSb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JSb,i,JSbrw);
    if (semstr==JSBrw.YearStr) then begin
      i = rwcnt;
      sd = JSbrw.DateFrom;
      ed = JSbrw.DateTo;
    end;
  end;

  return;
end;

function Boolean SMUParticipatedInEvent(record SMFVc SMFr,Longint eventnr,var Integer parttype)
begin
  Boolean res;
  record JALEventEntryVc JEEr;

  JEEr.AddCode = SMFr.SMFCode;
  JEEr.EventNr = eventnr;
  JEEr.CustType = 0;
  if (ReadFirstKey("CustType",JEEr,3,true)) then begin
    res = true;
    parttype = JEEr.StatusFlag;
  end;

  SMUParticipatedInEvent = res;
  return;
end;


function Boolean ArchiveSMUParticipatedInEvent(record ArchiveSMFVc SMFr,Longint eventnr,var Integer parttype)
begin
  Boolean res;
  record ArchiveJALEventEntryVc JEEr;

  JEEr.AddCode = SMFr.SMFCode;
  JEEr.EventNr = eventnr;
  JEEr.CustType = 0;
  if (ReadFirstKey("CustType",JEEr,3,true)) then begin
    res = true;
    parttype = JEEr.StatusFlag;
  end;

  ArchiveSMUParticipatedInEvent = res;
  return;
end;

function Boolean GetEventHist(record SMFVc SMFr,Date sd,Date ed,Integer type,var Integer parttype)
begin
  Boolean res;
  record JALEventVc JEr;
  
  JEr.StatusFlag = type;
  JEr.StartDate = sd;
  parttype = -1;
  if (ReadFirstKey("StatusFlag",JEr,2,false)) then begin
    if (JEr.StatusFlag==type and DateInRange(JEr.StartDate,sd,ed)) then begin
      if (SMUParticipatedInEvent(SMFr,JEr.SerNr,parttype)) then begin
        res = true;
      end;
    end;
  end;

  GetEventHist = res;
  return;
end;


function Boolean GetEventHist_Archive(record ArchiveSMFVc A_SMFr,Date sd,Date ed,Integer type,var Integer parttype)
begin
  Boolean res;
  record JALEventVc JEr;
  
  JEr.StatusFlag = type;
  JEr.StartDate = sd;
  parttype = -1;
  if (ReadFirstKey("StatusFlag",JEr,2,false)) then begin
    if (JEr.StatusFlag==type and DateInRange(JEr.StartDate,sd,ed)) then begin
      if (ArchiveSMUParticipatedInEvent(A_SMFr,JEr.SerNr,parttype)) then begin
        res = true;
      end;
    end;
  end;

  GetEventHist_Archive = res;
  return;
end;

procedure OutputStudentAppForStatus(string code,Integer status,var Integer cnt)
begin
  record JALTeacherAccVc JTr;
  Boolean TrHs;
  record CUVc CUr;
  
  TrHs = true;
  cnt = 0;
  JTR.RecType = 3;
  JTR.StatusFlag = status;
  JTR.RecCode = code;//this is a big security issue
  while (LoopKey("RecType",JTr,3,TrHs))begin
    if (JTr.RecCode!=code or JTr.RecType!=3 or JTr.StatusFlag!=status)then begin
      TrHs = false;
    end else begin
      CUr.Code = JTr.SMFCode;
      if(readfirstmain(CUr,1,true))then begin
        cnt = cnt + 1;
        if(cnt>1)then begin
          weboutstring(",");
        end;
        WebOutStringFormatNL("{");
        WebOutStringFormatNL("\"Nr\":\"" & cnt & "\",");
        WebOutStringFormatNL("\"SerNr\":\"" & JTr.SerNr & "\",");
        WebOutStringFormatNL("\"Statuss\":\"" & JTr.StatusFlag & "\",");
        WebOutStringFormatNL("\"Datums\":\"" & JTr.TransDate & "\",");
        WebOutStringFormatNL("\"Klase\":\"" & CUr.ClassNum & CUr.ClassChar & "\",");
        WebOutStringFormatNL("\"Skolens\":\"" & CUr.Name & "\"");
        WebOutStringFormatNL("}");
      end;
    end;
  end;

  return;
end;

procedure OutputEventAppForStatus(string code,Integer status,var Integer cnt)
begin
  record JALEventVc JEr;
  record JALEventEntryVc JEEr;
  Boolean TrHs;
  record CUVc CUr;
  
  cnt = 0;
  TrHs = true;
  JEEr.TeacherCode = code;//this is a big security issue
  JEEr.StatusFlag = status;
  while (LoopKey("TeacherCode",JEEr,2,TrHs))begin
    if (JEEr.TeacherCode!=code or JEEr.StatusFlag!=status)then begin
      TrHs = false;
    end else begin
      CUr.Code = JEEr.CustCode;
      if (ReadFirstMain(CUr,1,true))then begin
        JEr.SerNr = JEEr.EventNr;
        if (ReadFirstMain(JEr,1,true)) then begin
          cnt = cnt + 1;
          if(cnt>1)then begin
            weboutstring(",");
          end;
          WebOutStringFormatNL("{");
          WebOutStringFormatNL("\"Nr\":\"" & cnt & "\",");
          WebOutStringFormatNL("\"SerNr\":\"" & JEEr.SerNr & "\",");
          WebOutStringFormatNL("\"EventName\":\"" & JEr.Comment & "\",");
          WebOutStringFormatNL("\"Statuss\":\"" & JEEr.StatusFlag & "\",");
          WebOutStringFormatNL("\"Datums\":\"" & JEEr.TransDate & "\",");
          WebOutStringFormatNL("\"Klase\":\"" & CUr.ClassNum & CUr.ClassChar & "\",");
          WebOutStringFormatNL("\"Skolens\":\"" & CUr.Name & "\"");
          WebOutStringFormatNL("}");
        end;
      end;
    end;
  end;

  return;
end;

function Integer GetEduLevel(Integer num)
begin
  Integer res;
  
  if (num<=9) then begin
    res = 1;
  end;

  GetEduLevel = res;
  return;
end;

procedure ShowExtraCertFiles()
begin
  record JALClassBlock JCb;
  record MailVc Mailr;
  record ConfVc Confr;
  Boolean firstf;
  record Attach2Vc Attachr;
  record RLinkVc RLr;

  BlockLoad(JCb);
  
  WebOutString("\"cert_link\":[")
/*
  Confr.AddrName = JCb.CertFileConf;
  if (ReadFirstKey("AddrName",Confr,1,true)) begin
    while (LoopKey("UserTime:" & Confr.SerNr,Mailr,1,true)) begin
      if (ReadRecordLink(Mailr,1,Attachr,RLr)) begin
        if (firstf) then begin
          WebOutString(",");
        end else begin
          firstf = true;
        end;
        WebOutString("{\"name\":\"" & Mailr.Header & "\",\"link\":\"/WebDownloadDocs2.hal?uuid=" & Attachr.UUID & "&code=" & Attachr.SerNr & "\"}");
      end;
    end;
  end;
*/
  WebOutString("],");
  return;
end;

global webpublic 
procedure WebgetTeacherInfo()
begin
  record SMFVc SMFr;
  record ArchiveSMFVc A_SMFr;
  row SMFVc SMFrw;
  Integer i,mtrw,cnt,totcnt,totsmu,application_cnt;
  string 50 code,status,type,semstr;
  Boolean TrHs,testf;
  record RLinkVc RLr;
  Date sd,ed;
  Boolean titanflag,enudienaflag;
  Integer partype;
  record JALTeacherAccVc JTr;
  record ArchiveJALTeacherAccVc A_JTr;
  record CUVc CUr;
  vector Boolean vCust;
  
  code = webgetarg("code");
  type = webgetarg("type");
  status = webgetarg("status");
  
  
  WebOutStringFormatNL("{\"SMU\":[");
  if(FindTeacherRecord(CurrentCust,code))then begin
    totcnt = 0;
  /*
    resetLoop(JTr);
    TrHs = true;
    JTR.RecType = 0;
    JTR.StatusFlag = 0;
    JTR.RecCode = code;//this is a big security issue
    while(LoopKey("RecType",JTr,3,TrHs))begin
      if (JTr.RecCode!=code or JTr.RecType!=0 or JTr.StatusFlag!=0)then begin
        TrHs = false;
      end else begin
        SMFr.SMFCode = JTr.SMFCode;
        if(readfirstmain(SMFr,1,true))then begin
          cnt = cnt + 1;
          totcnt = totcnt + 1;
          if(cnt>1)then begin
              weboutstring(",");
          end;
          WebOutStringFormatNL("{");
          //WebOutStringFormatNL("\"SMFCode\":\"" & JTr.SMFCode & "\",");
          //WebOutStringFormatNL("\"RecCode\":\"" & JTr.RecCode & "\",");
          //WebOutStringFormatNL("\"RecType\":\"" & JTr.RecType & "\",");
          WebOutStringFormatNL("\"Nr\":\"" & cnt & "\",");
          WebOutStringFormatNL("\"SerNr\":\"" & JTr.SerNr & "\",");
          WebOutStringFormatNL("\"Statuss\":\"" & JTr.StatusFlag & "\",");
          WebOutStringFormatNL("\"Datums\":\"" & JTr.TransDate & "\",");

          //WebOutStringFormatNL("\"Skolens\":\"" & SMFr.SMFName & "\",");
          //WebOutStringFormatNL("\"SchoolName\":\"" & SMFr.SchoolName & "\",");
          WebOutStringFormatNL("\"Skolens\":\"" & SMFr.Manager & "\",");
          WebOutStringFormatNL("\"Nosaukums\":\"" & SMFr.SMFName & "\",");
          WebOutStringFormatNL("\"Likvidēts\":\"" & SMFr.StatusFlag & "\",");
          WebOutStringFormatNL("\"Klase\":\"" & SMFr.ClassNum & SMFr.ClassChar & "\",");
          WebOutStringFormatNL("\"RegDate\":\"" & SMFr.RegDate & "\"");
          WebOutStringFormatNL("}");
        end;
      end;
    end;
  */
    WebOutStringFormatNL("],");
    WebOutStringFormatNL("\"Students\":[");
    OutputStudentAppForStatus(code,0,cnt);
    totcnt = totcnt + cnt;
    WebOutStringFormatNL("],");


    WebOutStringFormatNL("\"Events\":[");
/*
    OutputEventAppForStatus(code,0,cnt);
    totcnt = totcnt + cnt;
*/
    WebOutStringFormatNL("],");

    WebOutStringFormatNL("\"RejectedStudents\":[");
    OutputStudentAppForStatus(code,2,cnt);
    WebOutStringFormatNL("],");

    WebOutStringFormatNL("\"RejectedEvents\":[");
    //OutputEventAppForStatus(code,2,cnt);
    WebOutStringFormatNL("],");

    WebOutStringFormatNL("\"ApprovedStudents\":[");
    RecordClear(JTr);
    resetLoop(JTr);
    TrHs = true;
    cnt = 0;
    JTR.RecType = 3;
    JTR.StatusFlag = 1;
    while (LoopKey("RecTypeN:" & code,JTr,2,TrHs)) begin
      if (JTr.RecType!=3 or JTr.StatusFlag!=1) then begin
        TrHs = false;
      end else begin
        CUr.Code = JTr.SMFCode;
        if (ReadFirstMain(CUr,1,true))then begin
          if (StudentTooOld(CUr.Code)==false) then begin
            cnt = cnt + 1;
            if(cnt>1)then begin
                weboutstring(",");
            end;
            WebOutStringFormatNL("{");
            WebOutStringFormatNL("\"Nr\":\"" & cnt & "\",");
            WebOutStringFormatNL("\"SerNr\":\"" & JTr.SerNr & "\",");
            WebOutStringFormatNL("\"Statuss\":\"" & JTr.StatusFlag & "\",");
            WebOutStringFormatNL("\"Datums\":\"" & DateToString(JTr.TransDate,"YYYY/MM/DD") & "\",");
            WebOutStringFormatNL("\"Klase\":\"" & CUr.ClassNum & CUr.ClassChar & "\",");
            WebOutStringFormatNL("\"Klase2\":\"" & CUr.ClassNum & "\",");
            WebOutStringFormatNL("\"Skolens\":\"" & FormatJSONString(CUr.Name) & "\",");
            WebOutStringFormatNL("\"Kods\":\"" & CUr.Code & "\",");
            WebOutStringFormatNL("\"CertFlag\":\"" & CUr.CertificateFlag & "\",");
            WebOutStringFormatNL("\"CertPrintf\":\"" & CUr.CertificatePrint & "\",");
            
            WebOutStringFormatNL("\"Enudiena\":\"" & CUr.EnuDienaFlag & "\",");
            WebOutStringFormatNL("\"Titan\":\"" & CUr.TitanFlag & "\",");
            RecordClear(SMFr);
            ReadRecordLink(CUr,1,SMFr,RLr);
            GetSMUSemester(SMFr,semstr,sd,ed);
            enudienaflag = GetEventHist(SMFr,sd,ed,1,partype);
            titanflag = GetEventHist(SMFr,sd,ed,2,partype);

            WebOutStringFormatNL("\"SMU\":\"" & SMFr.SMFCode & "\",");
            WebOutStringFormatNL("\"Nosaukums\":\"" & FormatJSONString(SMFr.SMFName) & "\",");
            WebOutStringFormatNL("\"ApprovalStatus\":\"" & SMFr.ApprovalStatus & "\",");
            WebOutStringFormatNL("\"Likvidets\":\"" & SMFr.StatusFlag & "\",");
            WebOutStringFormatNL("\"MacibuGads\":\"" & semstr & "\",");
            WebOutStringFormatNL("\"Izglitiba\":\"" & GetEduLevel(StringToInt(CUr.ClassNum)) & "\"");
  //          WebOutStringFormatNL("\"Titan\":\"" & SMFr.TitanFlag & "\",");
  //          WebOutStringFormatNL("\"Enudiena\":\"" & SMFr.EnuDienaFlag & "\"");
            WebOutStringFormatNL("}");
          end;
        end;
      end;
    end;


    RecordClear(A_JTr);
    ResetLoop(A_JTr);
    TrHs = true;
    A_JTr.RecType = 3;
    A_JTr.StatusFlag = 1;
    while (LoopKey("RecTypeN:" & code,A_JTr,2,TrHs)) begin
      if (A_JTr.RecType!=3 or A_JTr.StatusFlag!=1) then begin
        TrHs = false;
      end else begin
        CUr.Code = A_JTr.SMFCode;
        if (vCust[A_JTr.SMFCode]==false and ReadFirstMain(CUr,1,true))then begin
          vCust[A_JTr.SMFCode] = true;
          if (StudentTooOld(CUr.Code)==false) then begin
            RecordClear(A_SMFr);
            i = 1;
            while (ReadRecordToLink(CUr,i,A_SMFr,RLr)) begin
              i = i + 1;
              cnt = cnt + 1;
              if(cnt>1)then begin
                  weboutstring(",");
              end;
              WebOutStringFormatNL("{");
              WebOutStringFormatNL("\"Nr\":\"" & cnt & "\",");
              WebOutStringFormatNL("\"SerNr\":\"" & A_JTr.SerNr & "\",");
              WebOutStringFormatNL("\"Statuss\":\"" & A_JTr.StatusFlag & "\",");
              WebOutStringFormatNL("\"Datums\":\"" & DateToString(A_JTr.TransDate,"YYYY/MM/DD") & "\",");
              WebOutStringFormatNL("\"Klase\":\"" & A_SMFr.ClassNum & A_SMFr.ClassChar & "\",");
              WebOutStringFormatNL("\"Klase2\":\"" & A_SMFr.ClassNum & "\",");
              WebOutStringFormatNL("\"Skolens\":\"" & FormatJSONString(CUr.Name) & "\",");
              WebOutStringFormatNL("\"Kods\":\"" & CUr.Code & "\",");
              WebOutStringFormatNL("\"CertFlag\":\"" & CUr.CertificateFlag & "\",");
              WebOutStringFormatNL("\"CertPrintf\":\"" & CUr.CertificatePrint & "\",");
              
              //WebOutStringFormatNL("\"Enudiena\":\"" & CUr.EnuDienaFlag & "\",");
              //WebOutStringFormatNL("\"Titan\":\"" & CUr.TitanFlag & "\",");

              enudienaflag = GetEventHist_Archive(A_SMFr,sd,ed,1,partype);
              titanflag = GetEventHist_Archive(A_SMFr,sd,ed,2,partype);

              WebOutStringFormatNL("\"SMU\":\"" & A_SMFr.SMFCode & "\",");
              WebOutStringFormatNL("\"Nosaukums\":\"" & FormatJSONString(A_SMFr.SMFName) & "\",");
              WebOutStringFormatNL("\"ApprovalStatus\":\"" & A_SMFr.ApprovalStatus & "\",");
              WebOutStringFormatNL("\"Likvidets\":\"" & A_SMFr.StatusFlag & "\",");
              WebOutStringFormatNL("\"MacibuGads\":\"" & A_SMFr.Semester & "\",");
              WebOutStringFormatNL("\"Izglitiba\":\"" & GetEduLevel(StringToInt(A_SMFr.ClassNum)) & "\",");
              WebOutStringFormatNL("\"Titan\":\"" & titanflag & "\",");
              WebOutStringFormatNL("\"Enudiena\":\"" & enudienaflag & "\"");
              WebOutStringFormatNL("}");
            end;
          end;
        end;
      end;
    end;


    ResetLoop(SMFr);
    RecordClear(SMFr);
    while (LoopKey("MCode:" & code,SMFr,1,true)) begin
      if (SMFr.ApprovalStatus==1) then begin
        totsmu = totsmu + 1;
      end;
    end;
    GetTeacherSMUApplications(code,application_cnt,false);

  end;
  WebOutStringFormatNL("],");  
  WebOutStringFormatNL("\"totcnt\":" & totcnt);
  WebOutStringFormatNL(",\"application_cnt\":" & application_cnt & ",");
  ShowExtraCertFiles;
  WebOutStringFormatNL("\"totsmu\":" & totsmu);
  WebOutString("}");
  
  
  
  /*if(nonblank(code))then begin
    while(loopmain(SMFr,1,true))begin

      mtrw = matrowcnt(SMFr);
      For(i=0;i<mtrw;i=i+1) begin
        matrowget(SMFr,i,SMFrw);
        if(SMFrw.Code==code)then begin
          i = mtrw;
          cnt = cnt + 1;
          if(cnt>1)then begin
            weboutstring(",");
          end;
          weboutstring("{");
            weboutstring("\"Cnt\":\"" & cnt & "\",");
            weboutstring("\"Name\"");
          weboutstring("}");
        end;
      end;

    end;
  end;*/

return;
end;

global webpublic 
procedure WebgetStudentSMUArchive()
begin
  record SMFVc SMFr;
  record ArchiveSMFVc A_SMFr;
  row SMFVc SMFrw;
  Integer i,j,cnt;
  string 50 tstr;
  Boolean TrHs,testf;
  record RLinkVc RLr;
  Date sd,ed;
  Boolean titanflag,enudienaflag;
  Integer partype;
  record CUVc CUr,tCUr;
    
  WebOutString("{");
  CUr.Code = CurrentCust;
  if (ReadFirstMain(Cur,1,true)) then begin
    WebOutString("\"SMU\":[");
    i = 1;
    while (ReadRecordToLink(CUr,i,A_SMFr,RLr)) begin
      i = i + 1;
      cnt = cnt + 1;
      if(cnt>1)then begin
          weboutstring(",");
      end;
      WebOutStringFormatNL("{");

      WebOutStringFormatNL("\"SMU\":\"" & A_SMFr.SMFCode & "\",");
      WebOutStringFormatNL("\"Nosaukums\":\"" & FormatJSONString(A_SMFr.SMFName) & "\",");
      WebOutStringFormatNL("\"startdate\":\"" & A_SMFr.ActDateStart & "\",");
      WebOutStringFormatNL("\"enddate\":\"" & A_SMFr.ActDateEnd & "\",");
      WebOutStringFormatNL("\"ProdSpec\":\"" & A_SMFr.ProdSpec & "\",");
      WebOutStringFormatNL("\"targetAudit\":\"" & FormatJSONString(A_SMFr.TargetAud) & "\",");
      WebOutStringFormatNL("\"education\":\"" & StringFromSet(3001,A_SMFr.EducationType) & "\",");
      WebOutString("""emplist"":[");
      j = 1;
      while (ReadRecordLink(A_SMFr,j,tCUr,RLr)) begin
        if (j>1) then begin
          WebOutString(",");
        end;
        WebOutString("{""Code"":""" & tCUr.Code & """,");
        WebOutString("""Name"":""" & FormatJSONString(tCUr.Name) & """,");
        WebOutString("""eMail"":""" & FormatJSONString(tCUr.eMail) & """}");
        j = j + 1;
      end;
      WebOutString("],"); 
      WebOutStringFormatNL("\"prodText\":\"");
      for (j=0;j<SizeTextCnt(A_SMFr);j=j+200) begin
        tstr = StringFromText(A_SMFr,j,200);
        WebOutString(FormatJSONString(StrReplace(tstr,chr(13),"\\n")));
      end;
      WebOutString("\"");
      WebOutStringFormatNL("}");
    end;

    WebOutStringFormatNL("]");  
  end;
  WebOutString("}");

  return;
end;

procedure DisplayEntryRows(integer type,string code,integer status)
begin
  record JALTeacherAccVc JTr;
  boolean TrHs;
  integer cnt;

  cnt = 0;

  //WebOutStringFormatNL("<script>document.teacherinfo=WebgetTeacherInfo.hal?code=" & code & "&type=" & type & "&status=" & status & "</script>");

  /*TrHs = true;
  resetLoop(JTr);
  JTr.RecType = type;
  JTr.StatusFlag = status;
  JTr.RecCode = code;
  JTr.TransDate = addDay(CurrentDate,4);
  WebOutStringFormatNL("<div class='entry_section'>");
  WebOutStringFormatNL("<div class='entry_section_title'>" & ToolWebNGTranslateText(26125 + status) & "</div>");

  while loopbackkey("RecType",JTr,4,TrHs) begin
    if status <> JTr.StatusFlag or type <> JTr.RecType or code <> JTr.RecCode then begin
      TrHs = false;
    end else begin
      cnt = cnt + 1;
      OutputSingleEntryLine(JTr,type,status);
    end;
  end;
  if cnt== 0 then begin
    WebOutStringFormatNL("<div class='entry_section_msg'>" & ToolWebNGTranslateText(26130) & "</div>");
  end;
  WebOutStringFormatNL("</div>");*/

return;
end;

procedure ShowTeacherEntry(record CUVc CUr,record TeacherVc TCr)
begin

  WebOutStringFormatNL("<script>");
    WebOutStringFormatNL("  var link = '" & FormatSimpleLink("/WebgetTeacherInfo.hal",true) & "?code=" & TCr.TeacherCode & "'");
    WebOutStringFormatNL("  xmlhttp=new XMLHttpRequest();");
    WebOutStringFormatNL("  xmlhttp.open('GET',link,false);");
    WebOutStringFormatNL("  xmlhttp.send(null);");

    WebOutStringFormatNL("  var text = xmlhttp.responseText;");
  WebOutStringFormatNL("</script>");

return;
end;

procedure ShowSmuEntry(record CUVc CUr,record SMFVc SMFr)
begin

  WebOutStringFormatNL("<script>");
    WebOutStringFormatNL("  var link = '" & FormatSimpleLink("/WebGetSkhInfo.hal",true) & "?code=" & CUr.Code & "'");
    WebOutStringFormatNL("  xmlhttp=new XMLHttpRequest();");
    WebOutStringFormatNL("  xmlhttp.open('GET',link,false);");
    WebOutStringFormatNL("  xmlhttp.send(null);");

    WebOutStringFormatNL("  var pupil = xmlhttp.responseText;");
  WebOutStringFormatNL("</script>");

return;
end;

procedure ShowMentorEntry(record CUVc CUr,record MentorVc MTr)
begin

  DisplayEntryRows(1,MTr.MentorCode,0);
  DisplayEntryRows(1,MTr.MentorCode,1);
  DisplayEntryRows(1,MTr.MentorCode,2);

return;
end;


procedure ShowSMFEntry(record CUVc CUr,record SMFVc SMFr)
begin
  record JALTeacherAccVc JTr;
  boolean TrHs;
  integer cnt;

  ShowSMFEntryForm(0,SMFr);
  ShowSMFEntryForm(1,SMFr);

  TrHs = true;
  resetLoop(JTr);
  JTr.SMFCode = SMFr.SMFCode;
  JTr.TransDate = addDay(CurrentDate,4);
  WebOutStringFormatNL("<div class='entry_section'>");
  cnt = 0;
  while loopbackkey("SMFCode",JTr,1,TrHs) begin
    if SMFr.SMFCode <> JTr.SMFCode then begin
      TrHs = false;
    end else begin
      cnt = cnt + 1;
      OutputSingleEntryLineSMF(JTr);
    end;
  end;
  if cnt== 0 then begin
    WebOutStringFormatNL("<div class='entry_section_msg'>" & ToolWebNGTranslateText(26130) & "</div>");
  end;

  WebOutStringFormatNL("</div>");

return;
end;

global
function integer GetJAlCustType(record CUVc CUr,var record SMFVc SMFr,var record TeacherVc TCr,var record MentorVc MTr)
begin
  integer res;
  record JALClassBlock JCbl;
  record RLinkVc RLr;

  res = -1;
  SMFr.CustCode = CUr.Code;
  if readfirstkey("CustCode",SMFr,1,true) then begin
    res = 0;
    goto LGetCustType;
  end; 
  BlockLoad(JCbl);
  if (blank(CUr.Classification)) then begin
    ReadFirstMain(CUr,1,true);
  end;
  if (SetInSet(JCbl.Schoolar,CUr.Classification)) then begin
    res = 0;
    ReadRecordLink(CUr,1,SMFr,RLr);
    goto LGetCustType;
  end; 
 
  TCr.CustCode = CUr.Code;
  if readfirstkey("CustCode",TCr,1,true) then begin
    res = 1;
    goto LGetCustType;
  end;
  MTr.CustCode = CUr.Code;
  if readfirstkey("CustCode",MTr,1,true) then begin
    res = 2;
    goto LGetCustType;
  end;

LGetCustType:;
  GetJAlCustType = res;
return;
end;


global
procedure WebShowEntry()
begin
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type;


  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    if readfirstmain(CUr,1,true) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      switch type begin
        case 0://SMF
               ShowSmuEntry(CUr,SMFr);
        case 1://Teacher
               ShowTeacherEntry(CUr,TCr);
        case 2://Mentor
               ShowMentorEntry(CUr,MTr);     
      end;
    end;
  end;

return;
end;

procedure ShowSMUDocSectionTemplate()
begin
  
  WebOutString("<div id='smuCard' class='info-smu'>");
  WebOutString("<div class='smu-name'>");
  WebOutString("<a class='open-info-smu'><h2 class='title'></h2></a>");
  WebOutString("<p class='leader'>" & ToolWebNGTranslateText2(80103) & "</p>");
  WebOutString("<p class='members'>" & ToolWebNGTranslateText2(80104) & "</p>");
  WebOutString("<p class='semester'></p>");
  WebOutString("</div>");
  WebOutString("<div class='documents'>");
  WebOutString("<p>" & ToolWebNGTranslateText2(80093) & "</p>");//SMU re�istr�cijas statuss
  WebOutString("<div class='docs'>");
  WebOutString("<div class='docs-card'>");
  WebOutString("<img class='posted' src='../img/doc-grey.png' alt=''>");
  WebOutString("<p>" & ToolWebNGTranslateText2(80094) & "</p>");//Ies�t�ts dokuments
  WebOutString("</div>");
  WebOutString("<div class='docs-card'>");
  WebOutString("<img class='submitTeacher' src='../img/doc-grey.png' alt=''>");
  WebOutString("<p>" & ToolWebNGTranslateText2(80095) & "</p>");//Skolot�js apstiprin�jis
  WebOutString("</div>");
  WebOutString("<div class='docs-card'>");
  WebOutString("<img class='submitJAL' src='../img/doc-grey.png' alt=''>");
  WebOutString("<p>" & ToolWebNGTranslateText2(80096) & "</p>");//JA Latvija apstiprin�jis
  WebOutString("</div>");
  WebOutString("</div>");
  WebOutString("<p>" & ToolWebNGTranslateText2(80097) & "</p>");//Aktivit�te:
  WebOutString("<div class='activitate'>");
  WebOutString("<div class='docs-card cbziema'>");
  WebOutString("<img src='' alt=''>");//../img/yes.png
  WebOutString("<p>" & ToolWebNGTranslateText2(80098) & "</p>");//Cits Baz�rs ziema
  WebOutString("</div>");
  WebOutString("<div class='docs-card cbreg'>");
  WebOutString("<img src='' alt=''>");//../img/mail.png
  WebOutString("<p>" & ToolWebNGTranslateText2(80099) & "</p>");//Cits Baz�rs re�ionos
  WebOutString("</div>");
  WebOutString("<div class='docs-card cbpav'>");
  WebOutString("<img src='' alt=''>");//../img/space.png
  WebOutString("<p>" & ToolWebNGTranslateText2(80100) & "</p>");//Cits Baz�rs pavasar�
  WebOutString("</div>");
  WebOutString("<div class='docs-card judiena'>");
  WebOutString("<img src='' alt=''>");//../img/no.png
  WebOutString("<p>" & ToolWebNGTranslateText2(80101) & "</p>");//Jauno uz��m�ju dienas
  WebOutString("</div>");
  WebOutString("</div>");
  WebOutString("</div>");
  WebOutString("<div class='smu-button'>");
  WebOutString("<button class='spbutton show-info-btn'>" & ToolWebNGTranslateText2(70053) & "</button>");//ATV�RT PIETEIKUMU
  WebOutString("<button class='spbutton reg-succes'>" & ToolWebNGTranslateText2(80102) & "<div class='reg_message'><div class='reg_icon'></div><div class='reg_text'>");
  ShowWebElement("REGSUCCESS_TIP");
  WebOutString("</div></div></button>");//RE�.APLIEC�BA
  WebOutString("</div>");
  WebOutString("</div>");
  WebOutString("</div>");  

  return;
end;

procedure ShowSMUInfoTemplate()
begin

    WebOutString("    <div class='company-info'>");
    WebOutString("        <p class='register-number'>" & ToolWebNGTranslateText2(80050) & "</p>");//
    WebOutString("        <p class='prod-descr'>" & ToolWebNGTranslateText2(80058) & "</p>");//Izglītības pakāpe:
    WebOutString("        <p class='education'>" & ToolWebNGTranslateText2(80055) & "</p>");//Izglītības pakāpe:
    //WebOutString("        <p class='type-company'>" & ToolWebNGTranslateText2(80051) & "</p>");//
    WebOutString("        <p class='target-type'>" & ToolWebNGTranslateText2(80052) & "</p>");//Mērkauditorija:
    WebOutString("        <p class='leader'>" & ToolWebNGTranslateText2(80056) & "</p>");//Vadītājs:
    WebOutString("        <p class='members'>" & ToolWebNGTranslateText2(80057) & "</p>");//Darbinieki:
    WebOutString("    </div>");

  return;
end;

global procedure ShowTeacherSmuEntry(record CUVc CUr,record TeacherVc TCr)
begin

  WebOutString("<div id='smu_doc_template'>");
  ShowSMUDocSectionTemplate;
  WebOutString("</div>");

  WebOutString("<div id='smu_info_template'>");
  WebOutString("<div class='company-detail'>");
  ShowSMUInfoTemplate;
  WebOutString("<div class='company-header'>");
  WebOutString("<h2>" & ToolWebNGTranslateText2(80053) & "</h2>");//
  WebOutString("<p>" & ToolWebNGTranslateText2(80054) & "</p>");//
  WebOutString("</div>");
  ShowFinancialTable("company-table",false);
  ShowEventTable("finplan_table",false);
  WebOutString("<div class='button-tab'>");
  WebOutString("<button id='confirmBtn' class='spbutton'>" & ToolWebNGTranslateText2(80090) & "</button>");
  WebOutString("<button id='rejectBtn' class='spbutton'>" & ToolWebNGTranslateText2(80091) & "</button>");
  WebOutString("<button id='printBtn' class='spbutton'>" & ToolWebNGTranslateText2(80092) & "</button>");
  WebOutString("</div>");

  WebOutString("</div>");
  WebOutString("</div>");
  
  WebOutStringFormatNL("<script>");
  WebOutStringFormatNL("  var link = '" & FormatSimpleLink("/WebGetSmuInfo.hal",true) & "?code=" & TCr.TeacherCode & "'");
  WebOutStringFormatNL("  xmlhttp=new XMLHttpRequest();");
  WebOutStringFormatNL("  xmlhttp.open('GET',link,false);");
  WebOutStringFormatNL("  xmlhttp.send(null);");
  WebOutStringFormatNL("  var SMUData = xmlhttp.responseText;");
  WebOutStringFormatNL("</script>");
  
return;
end;

global
procedure WebShowSmuEntry()
begin
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type;

  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    if readfirstmain(CUr,1,true) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      ShowTeacherSmuEntry(CUr,TCr);
    end;
  end;
return;
end;


global procedure ShowTeacherSmuArchiveEntry(record CUVc CUr,record TeacherVc TCr)
begin

  WebOutString("<div id='smu_doc_template'>");
  ShowSMUDocSectionTemplate;
  WebOutString("</div>");

  WebOutString("<div id='smu_info_template'>");
  WebOutString("<div class='company-detail'>");
  ShowSMUInfoTemplate;
  WebOutString("<div class='company-header'>");
  WebOutString("<h2>" & ToolWebNGTranslateText2(80053) & "</h2>");//
  WebOutString("<p>" & ToolWebNGTranslateText2(80054) & "</p>");//
  WebOutString("</div>");

  WebOutString("</div>");
  WebOutString("</div>");
  
  WebOutStringFormatNL("<script>");
  WebOutStringFormatNL("  var link = '" & FormatSimpleLink("/WebGetSmuArchiveInfo.hal",true) & "?code=" & TCr.TeacherCode & "'");
  WebOutStringFormatNL("  xmlhttp=new XMLHttpRequest();");
  WebOutStringFormatNL("  xmlhttp.open('GET',link,false);");
  WebOutStringFormatNL("  xmlhttp.send(null);");
  WebOutStringFormatNL("  var SMUData = xmlhttp.responseText;");
  WebOutStringFormatNL("</script>");
  
return;
end;

global
procedure WebShowSmuArchiveEntry()
begin
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type;

  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    if readfirstmain(CUr,1,true) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      ShowTeacherSmuArchiveEntry(CUr,TCr);
    end;
  end;
return;
end;

global webpublic
updating procedure WebJALSendEntry()
begin
  record JALTeacherAccVc JTr;
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type;
  string 20 code;


  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    if readfirstmain(CUr,1,true) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      if type == 0 then begin
        code = webgetarg("code");
        if nonblank(code) then begin
          type= stringtoint(WebGetArg("type"));
          if (!EntryExists(SMFr.SMFCode,code,type,0) and !EntryExists(SMFr.SMFCode,code,type,1)) then begin
            RecordNew(JTr);
            JTr.SerNr = NextSerNr("JALTeacherAccVc",CurrentDate,-1,false,"");
            JTr.TransDate = CurrentDate;
            JTr.TransTime = CurrentTime;
            JTr.SMFCode = SMFr.SMFCode;
            JTr.RecType = type;
            JTr.RecCode = code;
            JTr.StatusFlag = 0;
            if recordStore(JTr,true) then begin 
              
            end else begin

            end;
          end;
        end;
      end;
    end;
  end;

  ShowRedirectHtml(FormatSimpleLink(webgetarg("path"),true),false);

return;
end;

global webpublic
updating procedure WebJALChangeEntryStat()
begin 
  record JALTeacherAccVc JTr,oldJTr;
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type,ttype;
  string 20 code;


  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    ttype = stringtoint(WebGetArg("type"));
    if readfirstmain(CUr,1,true) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      type = type - 1;
      JTr.SerNr = StringToLongInt(WebGetArg("sernr"));
      if readfirstmain(JTr,1,true) then begin 
        if type == ttype and type == JTr.RecType then begin
          recordCopy(oldJTr,JTr);
          JTr.StatusFlag = StringToInt(WebGetArg("val"));
          if recordUpdate(oldJTr,JTr,true) then begin end;
        end;
      end;
    end;
  end;

  ShowRedirectHtml(FormatSimpleLink(webgetarg("path"),true),false);

return;
end;

global webpublic
updating procedure WebJALChangeEventEntryStat()
begin 
  record JALEventEntryVc JEEr,oldJEEr;
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  integer type,ttype;
  string 20 code;


  if nonblank(CurrentCust)then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      type = GetJAlCustType(CUr,SMFr,TCr,MTr);
      if (type==1) then begin
        JEEr.SerNr = StringToLongInt(WebGetArg("sernr"));
        if (ReadFirstMain(JEEr,1,true) and JEEr.TeacherCode==TCr.TeacherCode) then begin 
          RecordCopy(oldJEEr,JEEr);
          JEEr.StatusFlag = StringToInt(WebGetArg("status"));
          if (RecordUpdate(oldJEEr,JEEr,true)) then begin end;
        end;
      end;
    end;
  end;

  ShowRedirectHtml(FormatSimpleLink(webgetarg("path"),true),false);

return;
end;

global webpublic procedure WebGetSmuInfo()
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  integer i,mtrw,cnt;
  string 50 code,status,type;
  record JALFileVc JFr;
  record JALTeacherAccVc JTr;
  boolean TrHs,TrHs1,testf,testf1,testf2;
  string 255 semstr,tstr;
  Date sd,ed;
  Integer cbziema,cbreg,cbpav,judiena;

  if(WebLoginStatus==3)then begin
  code = webgetarg("code");
  
  WebOutStringFormatNL("[");
  
  if(nonblank(code))then begin
    while (LoopKey("MCode:" & code,SMFr,1,true)) begin
      cnt = cnt + 1;
      if(cnt>1)then begin
          weboutstring(",");
      end;
      WebOutStringFormatNL("{");
          WebOutStringFormatNL("\"regNr\":\"" & SMFr.SMFCode & "\",");
          WebOutStringFormatNL("\"klass\":\"" & FormatJSONString(SMFr.ClassNum) & "\",");

          if(SMFr.TypeFlag==0) then begin
              WebOutStringFormatNL("\"companyType\":\"" & "framing" & "\",");
          end else begin
            if(SMFr.TypeFlag==1) then begin
              WebOutStringFormatNL("\"companyType\":\"" & "services" & "\",");
            end else begin
              if(SMFr.TypeFlag==2) then begin
                WebOutStringFormatNL("\"companyType\":\"" & "both" & "\",");
              end else begin
                WebOutStringFormatNL("\"companyType\":\"" & "none" & "\",");
              end;
            end;  
          end;
          WebOutStringFormatNL("\"targetAudit\":\"" & FormatJSONString(SMFr.TargetAud) & "\",");
          WebOutStringFormatNL("\"education\":\"" & StringFromSet(3001,SMFr.EducationType) & "\",");
          WebOutStringFormatNL("\"prodDescr\":\"");
          for (i=0;i<SizeTextCnt(SMFr);i=i+200) begin
            tstr = StringFromText(SMFr,i,200);
            WebOutString(FormatJSONString(StrReplace(tstr,chr(13),"\\n")));
          end;
          WebOutString("\",");
          WebOutStringFormatNL("\"title\":\"" & FormatJSONString(SMFr.SMFName) & "\",");
          WebOutStringFormatNL("\"leader\":\"" & FormatJSONString(SMFr.Manager) & "\",");
          WebOutStringFormatNL("\"members\":\"" & FormatJSONString(SMFr.Member) & "\",");
          WebOutStringFormatNL("\"printCert\":\"" & SMFr.PrintCert & "\",");
          
          //show fin data and employee list
          GetFinData(SMFr);
          GetEmpList(SMFr);

          GetSMUSemester(SMFr,semstr,sd,ed);
          GetEventHist(SMFr,sd,ed,3,cbziema);
          GetEventHist(SMFr,sd,ed,4,cbreg);
          GetEventHist(SMFr,sd,ed,5,cbpav);
          GetEventHist(SMFr,sd,ed,6,judiena);
          
          WebOutStringFormatNL("\"approvalstatus\":\"" & SMFr.ApprovalStatus & "\",");
          WebOutStringFormatNL("\"oldapprovalstatus\":\"" & SMFr.OldApprovalStatus & "\",");
          WebOutStringFormatNL("\"cbziema\":\"" & cbziema & "\",");
          WebOutStringFormatNL("\"cbreg\":\"" & cbreg & "\",");
          WebOutStringFormatNL("\"cbpav\":\"" & cbpav & "\",");
          WebOutStringFormatNL("\"judiena\":\"" & judiena & "\"");

      WebOutStringFormatNL("}");
    end;
    WebOutStringFormatNL("]");
  end;

end;
return;
end;


global webpublic procedure WebGetSmuArchiveInfo()
begin
  record ArchiveSMFVc A_SMFr;
  integer i,mtrw,cnt;
  string 50 code,status,type;
  string 255 semstr,tstr;
  Date sd,ed;
  Integer cbziema,cbreg,cbpav,judiena;
  record CUVc CUr;
  record RLinkVc RLr;
  Integer j;

  if(WebLoginStatus==3)then begin
    code = webgetarg("code");
    
    WebOutStringFormatNL("[");
    
    if(nonblank(code))then begin
      while (LoopKey("MCode:" & code,A_SMFr,1,true)) begin
        cnt = cnt + 1;
        if(cnt>1)then begin
            weboutstring(",");
        end;
        WebOutStringFormatNL("{");
        WebOutStringFormatNL("\"regNr\":\"" & A_SMFr.SMFCode & "\",");
        WebOutStringFormatNL("\"klass\":\"" & A_SMFr.Semester & "\",");
        WebOutStringFormatNL("\"title\":\"" & FormatJSONString(A_SMFr.SMFName) & "\",");

        WebOutStringFormatNL("\"targetAudit\":\"" & FormatJSONString(A_SMFr.TargetAud) & "\",");
        WebOutStringFormatNL("\"education\":\"" & StringFromSet(3001,A_SMFr.EducationType) & "\",");
        WebOutStringFormatNL("\"prodDescr\":\"");
        for (i=0;i<SizeTextCnt(A_SMFr);i=i+200) begin
          tstr = StringFromText(A_SMFr,i,200);
          WebOutString(FormatJSONString(StrReplace(tstr,chr(13),"\\n")));
        end;
        WebOutString("\",");

        WebOutStringFormatNL("\"leader\":\"" & FormatJSONString(A_SMFr.Manager) & "\",");
        WebOutStringFormatNL("\"members\":\"" & FormatJSONString(A_SMFr.Member) & "\",");
        WebOutStringFormatNL("\"semester\":\"" & FormatJSONString(A_SMFr.Semester) & "\",");
        WebOutStringFormatNL("\"approvalstatus\":\"" & A_SMFr.ApprovalStatus & "\",");

  
        WebOutString("""emplist"":[");
        j = 1;
        while (ReadRecordLink(A_SMFr,j,CUr,RLr)) begin
          if (j>1) then begin
            WebOutString(",");
          end;
          WebOutString("{""Code"":""" & CUr.Code & """,");
          WebOutString("""Name"":""" & FormatJSONString(CUr.Name) & """,");
          WebOutString("""type"":""0"",");
          WebOutString("""eMail"":""" & FormatJSONString(CUr.eMail) & """,");
          WebOutString("""JobDesc"":""" & FormatJSONString(CUr.JobDesc) & """,");
          WebOutString("""Salary"":""" & CUr.Salary & """}");
          j = j + 1;
        end;
        WebOutString("],"); 

        GetSemesterDate(A_SMFr.Semester,sd,ed);
        GetEventHist_Archive(A_SMFr,sd,ed,3,cbziema);
        GetEventHist_Archive(A_SMFr,sd,ed,4,cbreg);
        GetEventHist_Archive(A_SMFr,sd,ed,5,cbpav);
        GetEventHist_Archive(A_SMFr,sd,ed,6,judiena);
        
        WebOutStringFormatNL("\"cbziema\":\"" & cbziema & "\",");
        WebOutStringFormatNL("\"cbreg\":\"" & cbreg & "\",");
        WebOutStringFormatNL("\"cbpav\":\"" & cbpav & "\",");
        WebOutStringFormatNL("\"judiena\":\"" & judiena & "\"");

        WebOutStringFormatNL("}");
      end;
    end;
    WebOutStringFormatNL("]");
  end;
return;
end;

global webpublic updating procedure WEBJALSMUChangeDocsStatus()
begin
  record SMFVc SMFr,oldSMFr;
  row SMFVc SMFrw;
  boolean testf;
  integer i,mtrw,cnt,type;
  string 50 code,status;
  record JALFileVc JTr,oldJTr;
  boolean TrHs;
  string 20 newstat,sernr;
  record TeacherVc TCr;
  record MentorVc MTr;
  record CUVc CUr;


  if(WebLoginStatus==3)then begin
    sernr = webgetarg("sernr");
    newstat = webgetarg("status");
    
    if(nonblank(sernr) and nonblank(newstat))then begin
/*
      while(LoopMain(JTr,1,true)) begin
        testf = true;
        if(JTr.SMFCode!=sernr) then begin testf = false; end;
        if(stringtoint(newstat)==1 or stringtoint(newstat)==3)then begin
          if(testf) then begin
            JTr.Status = stringtoint(newstat);
            if(RecordStore(JTr,true)) then begin
              logtext(0, "save");
            end else begin
              logtext(0, "Error in save");
            end;  
          end;  
        end;  
      end;
*/
//again security issue... anyone can call this function
      Cur.Code = CurrentCust;
      if (ReadFirstMain(CUr,1,true)) then begin
        type = GetJAlCustType(CUr,SMFr,TCr,MTr);
        if (type==1) then begin
          SMFr.SMFCode = sernr;
          if (ReadFirstMain(SMFr,1,true)) then begin
            RecordCopy(oldSMFr,SMFr);
            SMFr.ApprovalStatus = StringToInt(newstat);
            RecordUpdate(oldSMFr,SMFr,true);
            if (SMFr.ApprovalStatus==6) then begin//reset the status to 0 so that students can edit it. We store old status in SMFr.OldApprovalStatus field
              RecordCopy(oldSMFr,SMFr);
              SMFr.ApprovalStatus = 0;
              RecordUpdate(oldSMFr,SMFr,true);
            end;
          end;
        end;
      end;
      weboutstring("{\"result\":\"OK\"}");
    end else begin

      weboutstring("{\"result\":\"Error params\"}");
    end;
  end else begin

    weboutstring("{\"result\":\"Error Login\"}");
  end;
  

return;
end;

global webpublic
procedure WebGetEventBadge()
begin
  record CUVc CUr;
  record SMFVc SMFr,oldSMFr;
  record TeacherVc Teacher;
  record MentorVc MTr;
  Integer type;
  record JALEventVc JEr;
  Boolean TrHs,applyf,testf;
  Integer cnt;

  CUr.Code = CurrentCust;
  if(ReadFirstMain(CUr,1,true) and nonblank(CurrentCust)) then begin 
    type = GetJALCustType(CUr,SMFr,Teacher,MTr);
    JEr.SerNr = "";
    if (type==0 and SMFr.ApprovalStatus==3) then begin
      TrHs = true;
      JEr.ActiveFlag = 1;
      JEr.StartDate = AddDay(CurrentDate,-5);
      while (LoopKey("Active",JEr,2,TrHs)) begin
        if (JEr.ActiveFlag!=1) then begin
          TrHs = false;
        end else begin
          if (JEr.EndDate > CurrentDate and JEr.ClosedFlag==0) then begin
            testf = true;
            if (DateInRange(CurrentDate,JEr.RegFrom,JEr.RegUntil)==false) then begin
              testf = false;
            end;
            if (MatRowCnt(JEr)==0) then begin// and calf
              testf = false;
            end;
            if (JEr.Type!=0) then begin
              testf = false;
            end;
            if (testf) then begin
              cnt = cnt + 1;
            end;    
          end;
        end;
      end;
    end;
  end;

  WebOutString("{""event_cnt"":" & cnt & "}");

  return;
end;

procedure CreateFakeSMUEntry(var record SMFVc SMFr,record CUVc CUr)
begin
  record TeacherVc TCr;
  record SchoolVc SCr;
  row SMFVc SMFrw;
  string 255 tstr;
  Longint pos;
  
  while (GetNextSubstring(CUr.TeacherCode,pos,",",tstr)) begin
    ClearRow(SMFr,SMFrw,1);
    SMFrw.Type = 0;
    SMFrw.Code = tstr;
    TCr.TeacherCode = SMFrw.Code;
    if (ReadFirstMain(TCr,1,true)) then begin
      SMFrw.Name = TCr.TeacherName;
    end;
    MatRowPut(SMFr,MatRowCnt(SMFr),SMFrw);
  end;
  
  SCr.SchoolCode = CUr.SchoolCode;
  if (ReadFirstMain(SCr,1,true)) then begin
    SMFr.SchoolCode = SCr.SchoolCode;
    SMFr.SchoolName = SCr.SchoolName;
  end;

  return;
end;

procedure ShowEmployerRequests(string custcode)
begin
  Boolean TrHs,firstf;
  record JALTeacherAccVc JTr;
  record SMFVc SMFr;
  
  WebOutStringFormatNL("\"employerrequests\": [" );
  JTr.StatusFlag = 0;
  JTr.RecType = 2;
  JTr.RecCode = custcode;
  TrHs = true;
  while (LoopKey("RecType",JTr,3,TrHs)) begin
    if (JTr.StatusFlag!=0 or JTr.RecType!=2 or JTr.RecCode!=custcode) then begin
      TrHs = false;
    end else begin
      SMFr.SMFCode = JTr.SMFCode;
      if (ReadFirstMain(SMFr,1,true)) then begin
        if (!firstf) then begin
          firstf = true;
        end else begin
          WebOutStringFormatNL(",");
        end;
        WebOutStringFormatNL("{\"empapp\":\"" & JTr.SerNr &  "\",");
        WebOutStringFormatNL("\"smucode\":\"" & SMFr.SMFCode & "\",");
        WebOutStringFormatNL("\"smuname\":\"" & FormatJSONString(SMFr.SMFName) & "\"}");
      end;
    end;
  end;    
  WebOutStringFormatNL("]," );

  return;
end;

function Integer GetTeacherConfirmation(record CUVc CUr)
begin
  Integer res;
  record JALTeacherAccVc JTr;
  Boolean TrHs;

  TrHs = true;
  JTr.SMFCode = CUr.Code;
  while (LoopBackKey("SMFCode",JTr,1,TrHs)) begin
    if (JTr.SMFCode!=CUr.Code) then begin
      TrHs = false;
    end else begin
      if (JTr.RecType==3) then begin
        res = JTr.StatusFlag;
        TrHs = false;
      end;
    end;
  end;

  GetTeacherConfirmation = res;
  return;
end;

function string 255 OutPutConfirmation(Integer fc,string tval,string resval)
begin
  string 255 res;

  if (fc==1) then begin
    res = resval;
  end else begin
    res = tval;
  end;

  OutPutConfirmation = res;
  return;
end;

global webpublic procedure WebGetSkhInfo()
begin
  record SMFVc SMFr;
  row SMFVc SMFrw;
  integer i,mtrw,cnt,confirmteach;
  string 50 code,status,type,tstr,semstr;
  record CUVc CUr;
  record ObjVc OBr;
  boolean TrHs,testf,smuf;
  record RLinkVc RLr;
  Date sd,ed;


  code = webgetarg("code");

  if(nonblank(code))then begin
    CUr.Code = code;
    logtext(0,"1");
    if (ReadFirstMain(CUr,1,true)) then begin
      OBr.Code = SMFr.Objects;
      readfirstmain(OBr, 1, true);
      smuf = (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr));
      if (smuf==false) then begin
        CreateFakeSMUEntry(SMFr,CUr);
      end;
        WebOutStringFormatNL("{");
        WebOutStringFormatNL("\"code\":\"" & code & "\",");
        WebOutStringFormatNL("\"fullName\":\"" & FormatJSONString(CUr.Name) & "\",");
        WebOutStringFormatNL("\"school\":\"" & FormatJSONString(SMFr.SchoolName) & "\",");
        WebOutStringFormatNL("\"email\":\"" & FormatJSONString(CUr.eMail) & "\",");
        WebOutStringFormatNL("\"TITAN\":\"" & CUr.TitanFlag & "\",");
        WebOutStringFormatNL("\"EnuDiena\":\"" & CUr.EnuDienaFlag & "\",");
        WebOutStringFormatNL("\"prodInfo\":\"" & FormatJSONString(SMFr.ProdSpec) & "\",");
        WebOutStringFormatNL("\"social\":\"" & FormatJSONString(SMFr.Email) & "\",");
        WebOutStringFormatNL("\"prodType\":\"" & FormatJSONString(OBr.Comment) & "\",");
        WebOutStringFormatNL("\"smuCode\":\"" & SMFr.SMFCode & "\",");
        WebOutStringFormatNL("\"smuName\":\"" & FormatJSONString(SMFr.SMFName) & "\",");
        WebOutStringFormatNL("\"hasSMU\":\"" & smuf & "\",");
        WebOutStringFormatNL("\"regDate\":\"" & SMFr.RegDate & "\",");
        WebOutString("""Text"":""");
        for (i=0;i<SizeTextCnt(SMFr);i=i+200) begin
          tstr = FormatJSONString(StringFromText(SMFr,i,200));
          WebOutString(StrReplace(tstr,chr(13),"\\n"));
        end;
        WebOutString(""",");
        ShowEmployerRequests(CUr.Code);
        GetEmpList(SMFr);
        GetSchoolEmpList(SMFr.SchoolCode,SMFr.SMFCode);
        GetSMUSemester(SMFr,semstr,sd,ed);

        matrowget(SMFr,0,SMFrw);
        WebOutStringFormatNL("\"teacher\":\"" & FormatJSONString(SMFrw.Name) & "\",");
        WebOutStringFormatNL("\"Semester\":\"" & FormatJSONString(semstr) & "\",");
        if(CUr.AgeFlag!=0) then begin
          WebOutStringFormatNL("\"hightSchool\":" & "false" & ",");
          WebOutStringFormatNL("\"parent\": {" );
          WebOutStringFormatNL("\"fullName\":\"" & FormatJSONString(CUr.ParentName & " " & CUr.ParentSurName) &  "\",");
          WebOutStringFormatNL("\"email\":\"" & FormatJSONString(CUr.ParenteMail) & "\"");
          WebOutStringFormatNL("}," );
        end else begin
          WebOutStringFormatNL("\"hightSchool\":" & "true" & ",");
        end;
        if(true) then begin
          WebOutStringFormatNL("\"ApprovalStatus\":\"" & OutPutConfirmation(CUr.ForceCertificate,SMFr.ApprovalStatus,5) & "\",");
          WebOutStringFormatNL("\"smu\":\"" & FormatJSONString(OutPutConfirmation(CUr.ForceCertificate,SMFr.SMFName," ")) & "\",");
          WebOutStringFormatNL("\"regDate\":\"" & SMFr.TransDate & "\",");
          WebOutStringFormatNL("\"perfrom\":\"" & SMFr.ActDateStart & "\",");
          WebOutStringFormatNL("\"perto\":\"" & SMFr.ActDateEnd & "\",");
          WebOutStringFormatNL("\"class\":\"" & FormatJSONString(SMFr.ClassNum & SMFr.ClassChar) & "\",");
          WebOutStringFormatNL("\"liquidated\":\"" & SMFr.StatusFlag & "\",");
          WebOutStringFormatNL("\"CertificateFlag\":\"" & CUr.CertificateFlag & "\",");
          WebOutStringFormatNL("\"ForceCertificate\":\"" & CUr.ForceCertificate & "\",");

          if(nonblank(SMFr.Manager) or !smuf) then begin
            WebOutStringFormatNL("\"director\":" & "true" & ",");
          end else begin
            WebOutStringFormatNL("\"director\":" & "false" & ",");
          end;
        end else begin
          WebOutStringFormatNL("\"smu\":" & "false" & ",");
        end;  
        ShowExtraCertFiles;
         if (CUr.AgeFlag==0) then begin
          CUr.ConfirmPar = 1;     
        end;
        
        WebOutStringFormatNL("\"forceupdate\":\"" & CUr.ForceUpdate & "\",");
        //confirmteach = GetTeacherConfirmation(CUr);
        confirmteach = CUr.ConfirmTeach;
        WebOutStringFormatNL("\"verified\": {" );
        WebOutStringFormatNL("\"personal\":" & OutPutConfirmation(CUr.ForceCertificate,CUr.ConfirmSKL,1)  &  ",");
        WebOutStringFormatNL("\"parents\":" & OutPutConfirmation(CUr.ForceCertificate,CUr.ConfirmPar,1) & ",");
        WebOutStringFormatNL("\"teacher\":" & OutPutConfirmation(CUr.ForceCertificate,confirmteach,1) );
        WebOutStringFormatNL("}" );
        WebOutStringFormatNL("}");
    end;
  end;


return;
end;

function Boolean FindEventTranslation(record JALEventVc JEr,record WebNGTranslateVc WTr)
begin
  Boolean res;

  WTr.Code = JEr.SerNr;
  WTr.FileName = 5;
  WTr.LangCode = JEr.DefLangCode;
  if (ReadFirstKey("FileName",WTr,3,true)) then begin
    res = true;
  end;
  
  FindEventTranslation = res;
  return;
end;

procedure OutputSingleEvent(record JALEventVc JEr,Boolean applyf,var Integer cnt,record SMFVc SMFr)
begin
  string 255 tstr;
  Integer i;
  Longint sernr2;
  record WebNGTranslateVc WTr;
  record JALEventEntryVc JEEr;
  record JALEventVc tJEr;

  cnt = cnt + 1;
  if (cnt>1)then begin
    weboutstring(",");
  end;
  FindEventTranslation(JEr,WTr);
  tstr = WTr.Comment;
  if (blank(tstr)) then begin
    tstr = JEr.Comment;
  end;

  tJEr.Mother = JEr.SerNr;
  tJEr.Type = 1;
  if (ReadFirstKey("TypeMother",tJEr,2,true)) then begin
    sernr2 = tJEr.SerNr;
  end;

  WebOutStringFormatNL("{");
  WebOutStringFormatNL("\"serNr\":\"" & JEr.SerNr & "\",");
  WebOutStringFormatNL("\"serNr2\":\"" & sernr2 & "\",");
  WebOutStringFormatNL("\"dataStart\":\"" &  DateToString(JEr.StartDate,"DD.MM.YYYY") & "\",");
  WebOutStringFormatNL("\"dataEnd\":\"" & DateToString(JEr.EndDate,"DD.MM.YYYY") & "\",");
  WebOutStringFormatNL("\"regStart\":\"" &  DateToString(JEr.RegFrom,"DD.MM.YYYY") & "\",");
  WebOutStringFormatNL("\"regEnd\":\"" & DateToString(JEr.RegUntil,"DD.MM.YYYY") & "\",");
  WebOutStringFormatNL("\"nameEvent\":\"" & FormatJSONString(tstr) & "\",");
  WebOutStringFormatNL("\"allowApply\":\"" & applyf & "\",");
  WebOutStringFormatNL("\"description\":\"");
  for (i=0;i<SizeTextCnt(WTr);i=i+200) begin
    tstr = StringFromText(WTr,i,200);
    WebOutString(StrReplace(tstr,chr(13),"</br>"));
  end;
  WebOutString("\"");
  WebOutStringFormatNL("}"); 

  return;
end;

global webpublic 
procedure WebGetEvents()
begin
  record JALEventVc JEr;
  record JALEventEntryVc JEEr;
  record CUVc CUr;
  integer cnt;
  Longint i,type;
  Boolean applyf,calf,TrHs,testf;
  string 255 tstr;
  record SMFVc SMFr;
  record TeacherVc Teacher;
  record MentorVc MTr;

  calf = WebGetArg("calf")=="1";
  cnt = 0;
  CUr.Code = CurrentCust;
  if(ReadFirstMain(CUr,1,true) and nonblank(CurrentCust)) then begin 
    type = GetJALCustType(CUr,SMFr,Teacher,MTr);
    JEr.SerNr = "";
    WebOutStringFormatNL("[");
    //if (calf) then begin
      TrHs = true;
      JEr.ActiveFlag = 1;
      JEr.StartDate = AddDay(CurrentDate,-5);
      while (LoopKey("Active",JEr,2,TrHs)) begin
        if (JEr.ActiveFlag!=1) then begin
          TrHs = false;
        end else begin
          if (JEr.EndDate > CurrentDate and JEr.ClosedFlag==0) then begin
            testf = true;
            applyf = true;
            if (DateInRange(CurrentDate,JEr.RegFrom,JEr.RegUntil)==false) then begin
              applyf = false;
            end;
            if (MatRowCnt(JEr)==0) then begin// and calf
              applyf = false;
            end;
            if (JEr.Type!=0) then begin
              testf = false;
            end;
            if (type==0 and SMFr.ApprovalStatus!=3) then begin
              applyf = false;
            end;
            if (testf) then begin
              OutputSingleEvent(JEr,applyf,cnt,SMFr);
            end;    
          end;
        end;
      end;
/*
    end else begin
      TrHs = true;
      JEEr.AddCode = SMFr.SMFCode;
      while (LoopKey("AddCode",JEEr,1,TrHs)) begin
        if(JEEr.AddCode!=SMFr.SMFCode) then begin
          TrHs = false;
        end else begin
          if (JEEr.CustType==0) then begin
            JEr.SerNr = JEEr.EventNr;
            Readfirstmain(JEr,1,true);
            if (JEr.EndDate>=CurrentDate and JEEr.StatusFlag!=2) then begin
              OutputSingleEvent(JEr,applyf,cnt,SMFr);
            end;
          end;
        end;
      end;
    end;
*/
    WebOutStringFormatNL("]");
  end else begin  
    WebOutStringFormatNL("You might be registered");
  end;

  return;
end;

global webpublic procedure WebGetEmployers()
begin
record SMFVc SMFr;
record CUVc CUr;
integer pos;
string 200 member,members;
integer cnt,i;
record RLinkVc RLr;

cnt = 0;
CUr.Code = CurrentCust;
if(ReadFirstMain(CUr,1,true) and nonblank(CurrentCust)) then begin 
  SMFr.CustCode = CUr.Code;
  if (ReadFirstKey("CustCode",SMFr,1,true)) then begin
      WebOutStringFormatNL("[");
      i = 1;
      while (ReadRecordLink(SMFr,i,CUr,RLr)) begin   
        i = i + 1;  
        cnt = cnt + 1;
        if(cnt>1)then begin
          weboutstring(",");
        end;
        WebOutStringFormatNL("{");
        WebOutStringFormatNL("\"code\":\"" & CUr.Code & "\",");
        WebOutStringFormatNL("\"name\":\"" & FormatJSONString(CUr.Name) & "\"");
        WebOutStringFormatNL("}");     
      end;  
      WebOutStringFormatNL("]");
  end else begin 
    WebOutStringFormatNL("incorrect code");
  end;  
end else begin  
  WebOutStringFormatNL("You might be registered");
end;
return;
end;

function Boolean EventApplicationExists(string custcode,Longint eventnr)
begin
  Boolean res;
  record JALEventEntryVc JEEr;
  
  JEEr.EventNr = eventnr;
  JEEr.CustCode = CurrentCust;
  JEEr.StatusFlag = 0;
  if (ReadFirstKey("CustCode",JEEr,3,true)) then begin
    res = true;
  end;

  EventApplicationExists = res;
  return;
end;

global webpublic 
updating procedure WebCreateEventPieteikum()
begin
  record JALEventEntryVc JEr;
  record SMFVc SMFr;
  row SMFVc SMFrw;
  record CUVc CUr;
  string 50 code,tstr;
  Longint pos;

  SMFr.SMFCode = WebGetArg("code");
  if(ReadFirstMAin(SMFr,1,true)) then begin 
    if (EventApplicationExists(CurrentCust,StringToLongint(WebGetArg("event")))==false) then begin
      CUr.Code = CurrentCust;
      if (ReadFirstMain(CUr,1,true)) then begin
        RecordNew(JEr);
        JEr.SerNr =  NextSerNr("JALEventEntryVc",CurrentDate,-1,false,"");
        JEr.EventNr = WebGetArg("event");
        JEr.TransDate = CurrentDate;
        MatRowGet(SMFr,0,SMFrw);
        JEr.AddCode = SMFrw.Code;
        JEr.CustCode = CurrentCust;
        GetNextSubString(CUr.TeacherCode,pos,",",tstr);
        JEr.TeacherCode = tstr;
        JEr.StatusFlag = 0;
        JEr.OkFlag = 0;
        RecordStore(JEr,true);
      end;
    end;
  end;
  
  return;  
end;


/*Changed SMFCode to CustCode. We no longer create SMU in the beginning*/
global 
updating procedure CreateTeachApp(Integer type,string custcode, string teacherCode)
begin
record JALTeacherAccVc JTr;

RecordNew(JTr);
JTr.SerNr =  NextSerNr("JALTeacherAccVc",CurrentDate,-1,false,"");
JTr.SMFCode = custcode;
JTr.RecCode = teacherCode;
JTr.StatusFlag = 0;
JTr.TransDate = CurrentDate;
JTr.RecType = type;
RecordStore(JTr,true);

return;
end;

function Boolean ApplicationExists(Integer type,string custcode, string teacherCode)
begin
  record JALTeacherAccVc JTr;
  Boolean TrHs,res;

  TrHs = true;
  JTr.RecCode = teacherCode;
  JTr.StatusFlag = 0;
  JTr.RecType = type;
  while (LoopKey("RecType",JTr,3,TrHs)) begin
    if (JTr.RecCode!=teachercode or JTr.StatusFlag!=0 or JTr.RecType!=type) then begin
      TrHs = false;
    end else begin
      if (JTr.SMFCode==custcode) then begin
        res = true;
        TrHs = false;
      end;
    end;
  end;

  ApplicationExists = res;
  return;
end;

global 
updating procedure CreateUniqueTeachApp(Integer type,string custcode, string teacherCode)
begin

  if (ApplicationExists(type,custcode,teachercode)==false) then begin
    CreateTeachApp(type,custcode,teachercode);
  end;

  return;
end;

function Boolean GetTeacherApplication(string code,Longint eventnr,var record JALEventEntryVc rJEr)
begin
  record JALEventEntryVc JEr;
  Boolean res;


  JEr.AddCode = code;
  JEr.EventNr = eventnr;
  JEr.CustType = 1;
  if (ReadFirstKey("CustType",JEr,3,true)) then begin
    if (JEr.AddCode==code and JEr.CustType==1 and JEr.EventNr==eventnr) then begin
      res = true;
      RecordCopy(rJEr,JEr);
    end;
  end;

  GetTeacherApplication = res;
  return;
end;

function Integer GetTeacherApplicationStat(string code,Longint eventnr)
begin
  Integer res;
  record JALEventEntryVc JEr;

  res = 2;
  if (GetTeacherApplication(code,eventnr,JEr)) begin
    if (JEr.StatusFlag==1) then begin
      res = 1;
    end;
  end;

  GetTeacherApplicationStat = res;
  return;
end;

global
procedure GetTeacherSMUApplications(string code,var Integer cnt,Boolean printf)
begin
  record SMFVc SMFr;
  record JALEventEntryVc JEr;
  Boolean TrHs;
  record JALEventVc JLEr;
  vector Integer vTeacher;
  
  while (LoopKey("MCode:" & code,SMFr,1,true)) begin
    RecordClear(JEr);
    ResetLoop(JEr);
    JEr.AddCode = SMFr.SMFCode;
    TrHs = true;
    while (LoopKey("AddCode",JEr,1,TrHs)) begin
      if (JEr.AddCode!=SMFr.SMFCode) then begin
        TrHs = false;
      end else begin
        if (JEr.StatusFlag==1) then begin
          JLEr.SerNr = JEr.EventNr;
          Readfirstmain(JLEr,1,true);
          if (JLEr.EndDate>=CurrentDate) then begin
            cnt = cnt + 1;
            if (printf) then begin
              if(cnt>1)then begin
                weboutstring(",");
              end;
              if (vTeacher[JLEr.SerNr]==0) begin
                vTeacher[JLEr.SerNr] = GetTeacherApplicationStat(code,JLEr.SerNr);
              end;
              WebOutStringFormatNL("{");
              WebOutStringFormatNL("\"serNr\":\"" & JEr.SerNr & "\",");
              WebOutStringFormatNL("\"smu\":\""  & JEr.AddCode & "\",");
              WebOutStringFormatNL("\"name\":\""  & FormatJSONString(JEr.SMFName) & "\",");
              WebOutStringFormatNL("\"event\":\"" & JEr.EventNr & "\",");
              WebOutStringFormatNL("\"satus\":\"" & JEr.StatusFlag & "\",");
              WebOutStringFormatNL("\"teacherPart\":\"" & vTeacher[JLEr.SerNr] & "\",");
              
              WebOutStringFormatNL("\"filled\":\"" & JEr.OkFlag & "\"");
              WebOutStringFormatNL("}");  
            end;
          end;
        end;             
      end;
    end;
  end;

  return;
end;

procedure FindCustEntry(Longint sernr,Integer type,string code,var record JALEventEntryVc JEEr)
begin
  record JALEventEntryVc tJEEr;

  RecordClear(JEEr);
  tJEEr.EventNr = sernr;
  tJEEr.CustType = 0;
  tJEEr.AddCode = code;
  if (ReadFirstKey("CustType",tJEEr,3,true)) then begin
    RecordCopy(JEEr,tJEEr);
  end;

  return;
end;

global webpublic procedure WebGetEventsPieteikum()
begin
  record JALEventEntryVc JEEr;
  record JALEventVc JEr;
  record CUVc CUr;
  integer cnt,type;
  Boolean TrHs,allf;
  record SMFVc SMFr;
  record TeacherVc Teacher;
  record MentorVc MTr;
  record JALEventRequestVc JERr;
  record JALLiquidationBlock JLb;
  row JALLiquidationBlock JLbrw;
  Integer i,rwcnt,parttype;

  cnt = 0;
  CUr.Code = CurrentCust;
  allf = WebGetArg("all")=="1";
  if(ReadFirstMain(CUr,1,true) and nonblank(CurrentCust)) then begin 
    JEEr.CustCode = CurrentCust;
    TrHs = true;
    type = GetJALCustType(CUr,SMFr,Teacher,MTr);
    WebOutString("{""teacher"":""" & Teacher.TeacherCode & """,");
    WebOutString("""submittedevents"":[");
    switch (type) begin
      case 0:
        JEEr.AddCode = SMFr.SMFCode;
        while (LoopKey("AddCode",JEEr,1,TrHs)) begin
          if(JEEr.AddCode!=SMFr.SMFCode) then begin
            TrHs = false;
          end else begin
            if (JEEr.CustType==0) then begin
              JEr.SerNr = JEEr.EventNr;
              Readfirstmain(JEr,1,true);
              if ((JEr.EndDate>=CurrentDate or (allf and JEEr.StatusFlag==3)) and JEEr.StatusFlag!=2 and JEr.Type==0) then begin
                cnt = cnt + 1;
                if(cnt>1)then begin
                  weboutstring(",");
                end;

                WebOutStringFormatNL("{");
                WebOutStringFormatNL("\"serNr\":\"" & JEEr.SerNr & "\",");
                WebOutStringFormatNL("\"dataStart\":\"" & DateToString(JEr.StartDate,"DD.MM.YYYY") & "\",");
                WebOutStringFormatNL("\"dataEnd\":\"" & DateToString(JEr.EndDate,"DD.MM.YYYY") & "\",");
                WebOutStringFormatNL("\"smu\":\""  & JEEr.AddCode & "\",");
                WebOutStringFormatNL("\"name\":\""  & FormatJSONString(JEEr.SMFName) & "\",");
                WebOutStringFormatNL("\"type\":\"" & JEr.Type & "\",");
                WebOutStringFormatNL("\"event\":\"" & JEEr.EventNr & "\",");
                WebOutStringFormatNL("\"eventName\":\"" & FormatJSONString(JEr.Comment) & "\",");
                WebOutStringFormatNL("\"satus\":\"" & JEEr.StatusFlag & "\",");
                WebOutStringFormatNL("\"filled\":\"" & JEEr.OkFlag & "\"");
                WebOutStringFormatNL("}"); 
              end;    
            end;
          end;
        end;
      case 1:
        GetTeacherSMUApplications(Teacher.TeacherCode,cnt,true);
        //get teacher status
    end;
    if (allf and type==0 and (SMFr.ApprovalStatus==3 or SMFr.ApprovalStatus==5)) then begin
      BlockLoad(JLb);
      rwcnt = MatRowCnt(JLb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(JLb,i,JLbrw);
        if (DateInRange(CurrentDate,JLbrw.DateFrom,JLbrw.DateTo)) then begin
          JEr.SerNr = JLbrw.EventNr;
          if (ReadFirstMain(JEr,1,true)) then begin
            cnt = cnt + 1;
            if(cnt>1)then begin
              weboutstring(",");
            end;
            FindCustEntry(JEr.SerNr,0,SMFr.SMFCode,JEEr);
            WebOutStringFormatNL("{");
            WebOutStringFormatNL("\"serNr\":\"" & JEEr.SerNr & "\",");
            WebOutStringFormatNL("\"dataStart\":\"\",");
            WebOutStringFormatNL("\"dataEnd\":\"\",");
            WebOutStringFormatNL("\"smu\":\"\",");
            WebOutStringFormatNL("\"name\":\"\",");
            WebOutStringFormatNL("\"type\":\"" & JEr.Type & "\",");
            WebOutStringFormatNL("\"event\":\"" & JEr.SerNr & "\",");
            WebOutStringFormatNL("\"eventName\":\"" & FormatJSONString(ToolWebNGTranslateText2(70078)) & "\",");
            WebOutStringFormatNL("\"satus\":\"" & JEEr.StatusFlag & "\",");
            WebOutStringFormatNL("\"filled\":\"" & (JEEr.SerNr>0) & "\"");
            WebOutStringFormatNL("}"); 
            i = rwcnt;
          end;
        end;
      end;
    end;
    WebOutStringFormatNL("],");
    WebOutString("""eventrequests"":[");
    switch (type) begin
      case 0:
        JERr.SMFCode = SMFr.SMFCode;
        TrHs = true;
        cnt = 0;
        while (Loopkey("SMFCode",JERr,1,TrHs)) begin
          if (JERr.SMFCode!=SMFr.SMFCode) then begin
            TrHs = false;
          end else begin
            JEr.SerNr = JERr.EventNr;
            if (ReadFirstMain(JEr,1,true)) then begin
              cnt = cnt + 1;
              if(cnt>1)then begin
                weboutstring(",");
              end;

              WebOutStringFormatNL("{");
              WebOutStringFormatNL("\"event\":\"" & JERr.EventNr & "\",");
              WebOutStringFormatNL("\"reqtype\":\"" & JEr.Type & "\",");
              WebOutStringFormatNL("\"mainevent\":\"" & JEr.Mother & "\",");
              WebOutStringFormatNL("\"date\":\"" & DateToString(JEr.StartDate,"DD.MM") & "\",");
              
              //WebOutStringFormatNL("\"filled\":\"" & JERr.Status & "\"");
              WebOutStringFormatNL("\"filled\":\"" & SMUParticipatedInEvent(SMFr,JERr.EventNr,parttype) & "\"");
              WebOutStringFormatNL("}"); 
            end;
          end;
        end;
    end;
  
    WebOutStringFormatNL("]");
    
    WebOutString("}");
  end else begin  
    WebOutStringFormatNL("You might be registered");
  end;
  
  return;
end;

global webpublic
updating procedure WebDownloadEventCert()
begin
  record JALEventEntryVc JEEr;
  record RcVc RepSpec;
  string 255 filename;
  record SMFVc SMFr;
  record CUVc CUr;
  record RLinkVc RLr;
  Boolean smuf;

  JEEr.SerNr = StringToLongint(WebGetArg("app"));
  if (ReadFirstMain(JEEr,1,true)) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      smuf = (ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr));

      if ((smuf and SMFr.SMFCode==JEEr.AddCode and JEEr.CustType==0) or CurrentCust==JEEr.CustCode) then begin
        filename = "Apliecinajums.pdf";
        SetDocumentFilename(filename);
        SetMedia(mtPdf);
        RepSpec.long1 = JEEr.SerNr;
        PrintDocument(RepSpec,"CertificateForm",false);
        SetDocumentFilename("");
        if (FileExists(filename)) then begin
          WebSetContentType("application/pdf");
          WebSetContentDisposition("attachment; filename=" & filename);//or inline?
          WebOutFile(filename);
          Delete_File(filename);
        end;
      end;
    end;
  end;

  return;
end;

global webpublic updating procedure WebCreateEventsAnswer()
begin
  record JALEventEntryVc JEr;
  row JALEventEntryVc JErw;
  record SMFVc SMFr;
  row SMFVc SMFrw;
  string 20 code,status;
  integer i,cntrw;
  string 255 members;
  record ActVc Actr;
  area PostData;
  json datajson;
  cntrw = 0;
  
  logtext(0,"1");
  if(WebLoginStatus==3)then begin
    WebGetPostData(PostData);
    datajson = ParseJsonArea(PostData);
    JEr.SerNr = webgetarg("code");
    logtext(0,JEr.SerNr);
    if(readfirstmain(JEr,1,true)) then begin
      matrowget(JEr,cntrw,JErw);
      members = "";
      for(i=0;i<JSONCountChildren(datajson,"employee");i=i+1) begin
        status = JSONGet(datajson,"employee[0]/["  & i & "]/status");
        if(status == "true") then begin
          members = members & JSONGet(datajson,"employee[0]/["  & i & "]/name") & ",";
        end;  
      end;  
      logtext(0,members);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Dalibnieki";
      JErw.Value = Left(members,len(members)-1);
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      if(JSONGet(datajson,"socialNetworkCompetition")=="true") then begin 
        JErw.Field = cntrw + 1;
        JErw.Comment = "Socialo tiklu konkurss";
        JErw.Value = "yes";
      end else begin
        JErw.Field = cntrw + 1;
        JErw.Comment = "Socialo tiklu konkurss";
        JErw.Value = "no";
      end;  
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Marketinga materiali";
      if(JSONGet(datajson,"marketingMaterials[0]/[0]/booklet")=="true") then begin
        JErw.Value = "some booklet";
      end;  
      if(JSONGet(datajson,"marketingMaterials[0]/[0]/businessCards")=="true") then begin
        JErw.Value = JErw.Value & ",some businessCards";
      end;  
      if(JSONGet(datajson,"marketingMaterials[0]/[0]/activitiesStand")=="true") then begin
        JErw.Value = JErw.Value & ",some activitiesStand";
      end;  
      if(JSONGet(datajson,"marketingMaterials[0]/[0]/banner")=="true") then begin
        JErw.Value = JErw.Value & ",some banner";
      end;  
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "otra karta";
      if(JSONGet(datajson,"partTwo")=="true") then begin
        JErw.Value = "yes";
      end else begin
        JErw.Value = "no";
      end;  
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Stends";
      if(JSONGet(datajson,"stand[0]/[0]/a")=="true") then begin
        JErw.Value = "some a";
      end;  
      if(JSONGet(datajson,"stand[0]/[0]/b")=="true") then begin
        JErw.Value = JErw.Value & ",some b";
      end;  
      if(JSONGet(datajson,"stand[0]/[0]/c")=="true") then begin
        JErw.Value = JErw.Value & ",some c";
      end;  
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Elektribas nepieciesamiba";
      JErw.Value = JSONGet(datajson,"electReason");
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Business Pitch";
      if(JSONGet(datajson,"businessPitch")=="true") then begin
        JErw.Value = "yes";
      end else begin
        JErw.Value = "no";
      end;  
      matrowput(JEr,cntrw,JErw);
      cntrw=cntrw+1;
      matrowget(JEr,cntrw,JErw);
      JErw.Field = cntrw + 1;
      JErw.Comment = "Noteikumi";
      if(JSONGet(datajson,"terms")=="true") then begin
        JErw.Value = "yes";
      end else begin
        JErw.Value = "no";
      end;  
      matrowput(JEr,cntrw,JErw);
      JEr.OkFlag = 1;
      if(RecordStore(JEr,true)) then begin
        WebOutStringFormatNL("200");
      end else begin
        WebOutStringFormatNL("400");  
      end;
    end else begin
      WebOutStringFormatNL("400");  
    end;
  end;  
return;
end;

function Boolean SMUHasTeacher(record SMFVc SMFr,string teachercode)
begin
  Boolean res;
  row SMFVc SMFrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(SMFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMFr,i,SMFrw);
    if (SMFrw.Code==teachercode) then begin
      res = true;
    end;
  end;

  
  SMUHasTeacher = res;
  return;
end;

webpublic
global updating 
procedure WebChangeTitanStatus()
begin
  record CUVc CUr,oldCUr,sCUr;
  Integer type,stat;
  record SMFVc SMFr,oldSMFr;
  record MentorVc MTr;
  record TeacherVc TCr;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    type = GetJAlCustType(CUr,SMFr,TCr,MTr);
    if (type==1) then begin
      sCUr.Code = WebGetArg("cu");
      if (ReadFirstMain(sCUr,1,true)) then begin
        if (SetInSet(TCr.TeacherCode,sCUr.TeacherCode)) then begin
          RecordCopy(oldCUr,sCUr);
          stat = StringToInt(WebGetArg("stat"));
          switch (WebGetArg("type")) begin
            case "1": sCUr.EnuDienaFlag = stat;
            case "2": sCUr.TitanFlag = stat;
          end;
          RecordUpdate(oldCUr,sCUr,true);
        end;
      end;
    end;
  end;

  return;
end;

global webpublic
updating procedure WebSetTeacherEventStat()
begin
  record CUVc CUr;
  record SMFVc SMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  Integer type;
  Longint eventnr;
  record JALEventEntryVc JEr;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    type = GetJAlCustType(CUr,SMFr,TCr,MTr);
    if (type==1) then begin
      eventnr = StringToLongint(WebGetArg("event"));
      if (GetTeacherApplication(TCr.TeacherCode,eventnr,JEr)==false) begin
        RecordNew(JEr);
        JEr.SerNr = NextSerNr("JALEventEntryVc",CurrentDate,-1,false,"");
        JEr.CustType = 1;
        JEr.AddCode = TCr.TeacherCode;
        JEr.TransDate = CurrentDate;
        JEr.EventNr = eventnr;
      end;

      JEr.StatusFlag = StringToInt(WebGetArg("stat"));
      RecordStore(JEr,true);
    end;
  end;
  return;
end;

function Integer abs(Integer l)
begin
  Integer res;

  res = l;
  if (res<0) then begin res = -res; end;
  Abs = res;
end;

global webpublic
updating procedure WebSetPrintCertStat()
begin
  record CUVc CUr;
  record SMFVc SMFr,oldSMFr;
  record TeacherVc TCr;
  record MentorVc MTr;
  Integer type;
  row SMFVc SMFrw;
  Integer i,rwcnt;
  Boolean foundf;

  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    type = GetJAlCustType(CUr,SMFr,TCr,MTr);
    if (type==1) then begin
      SMFr.SMFCode = WebGetArg("smu");
      if (ReadFirstMain(SMFr,1,true)) then begin
        rwcnt = MatRowCnt(SMFr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMFr,i,SMFrw);
          if (SMFrw.Code==TCr.TeacherCode) then begin
            foundf = true;
            i = rwcnt;
          end;
        end;
        if (foundf) then begin
          RecordCopy(oldSMFr,SMFr);
          SMFr.PrintCert = abs(SMFr.PrintCert-1);
          RecordUpdate(oldSMFr,SMFr,true);
        end;
      end;
    end;
  end;

  return;
end;

function Integer GetCertificateNumber(string tstr)
begin
  Integer res,i;
  Boolean skipf;
  string 255 tmp;

  skipf = true;
  for (i=0;i<len(tstr);i=i+1) begin
    if (mid(tstr,i,1)!="0") then begin
      skipf = false;
    end;
    if (!skipf) then begin
      tmp = tmp & mid(tstr,i,1);
    end;
  end;
  
  res = StringToInt(tmp);

  GetCertificateNumber = res;
  return;
end;

global
function string 255 GetNextCertificateNr(Date td)
begin
  Integer number,max;
  Date td2;
  Boolean TrHs;
  record CUVc CUr;
  Longint pos;
  string 255 tmp,res;
  
  td2 = td;
  td2.month = 1;
  td2.day = 1;
  CUr.CertificateDate = td2;
  CUr.CertificateFlag = 1;
  TrHs = true;
  while (LoopKey("CertificateDate",CUr,2,TrHs)) begin
    if (CUr.CertificateFlag!=1 or (GetYear(CUr.CertificateDate)!=td2.year)) then begin
      TrHs = false;
    end else begin
      pos = -1;
      GetNextSubstring(CUr.CertificateNr,pos,"/",tmp);
      GetNextSubstring(CUr.CertificateNr,pos,"/",tmp); 
      number = GetCertificateNumber(tmp);
      if (number>max) then begin
        max = number;
      end;
    end;
  end;

  max = max + 1;
  res = GetYear(CurrentDate) & "/" & left("00000",5-len(max)) & max;

  GetNextCertificateNr = res;
  return;
end;

global webpublic
updating procedure WebCreateLiqCertificate()
begin
  record CUVc CUr,tCUr,oldCUr;
  record TeacherVc TCr;
  record SMFVc SMFr;
  record MentorVc MTr;
  Integer type;
  Boolean res;

  if (nonblank(CurrentCust)) then begin
    tCUr.Code = CurrentCust;
    if (ReadFirstMain(tCUr,1,true)) then begin 
      type = GetJAlCustType(tCUr,SMFr,TCr,MTr);
      if (type==1) then begin
        CUr.Code = WebGetArg("student");
        if (ReadFirstMain(CUr,1,true)) then begin
          if (CUr.TeacherCode==TCr.TeacherCode and CUr.CertificateFlag==0) then begin
            RecordCopy(oldCUr,CUr);
            CUr.CertificateFlag = 1;
            CUr.CertificateDate = CurrentDate;
            CUr.CertificateNr = GetNextCertificateNr(CurrentDate);
            CUr.PersonID = WebGetArg("personid");
            if (RecordUpdate(oldCUr,CUr,true)==0) then begin
              res = true;
            end;
          end;
        end;
      end;
    end;
  end;

  WebOutString("<res stat='" & res & "'></res>");

  return;
end;

function string 255 GetExtraFileList()
begin
  string 255 res,folder,fn;
  Integer i,cnt;

  folder = "webcust/CertFiles";
  cnt = CountFilesInDir(folder);
  for (i=0;i<cnt;i=i+1) begin
    fn = GetFileNameInDir(folder,i);
    if (right(fn,4)==".pdf") then begin
      res = res & " '../../" & folder & "/" & fn & "'";
    end;
  end;

  GetExtraFileList = res;
  return;
end;

updating procedure DoPrintLiqCertificate(record RcVc RepSpec,string sess,Boolean mulf,var string allfilelist)
begin
  string 255 filename,filename2,filename3,extrafiles;

  filename = "tmp/" & sess & "/Sertifikats" & RepSpec.f1 & ".pdf";  
  filename2 = "Sertifikats.pdf";
  filename3 = "tmp/" & sess & "/Sertifikats" & RepSpec.f1 & "_full.pdf";;
  
  SetDocumentFilename(filename);
  SetMedia(mtPdf);
  PrintDocument(RepSpec,"LiqCertificateForm",false);
  SetDocumentFilename("");
  extrafiles = GetExtraFileList;
  RunShellScript("cd tmp/" & sess & "; pdfunite Sertifikats" & RepSpec.f1 & ".pdf " & extrafiles & " Sertifikats" & RepSpec.f1 & "_full.pdf; cd ..;");


  if (FileExists(filename3)) then begin  
    allfilelist = allfilelist & " Sertifikats" & RepSpec.f1 & "_full.pdf";    
    if (mulf==false) then begin
      WebSetContentType("application/pdf");
      WebSetContentDisposition("attachment; filename=" & filename2);//or inline?
      WebOutFile(filename3);
      DeleteFolder("tmp/" & sess);
    end;
  end;

  return;
end;

global webpublic
updating procedure WebPrintLiqCertificate()
begin
  record CUVc CUr,tCUr,oldCUr;
  record TeacherVc TCr;
  record SMFVc SMFr;
  record MentorVc MTr;
  Integer type;
  Boolean res;
  record RcVc RepSpec;
  string 255 allfilelist,sess;
  Date td2;
  Boolean TrHs;

  if (nonblank(CurrentCust)) then begin
    tCUr.Code = CurrentCust;
    if (ReadFirstMain(tCUr,1,true)) then begin 
      type = GetJAlCustType(tCUr,SMFr,TCr,MTr);
      if (type==1) then begin
        if (WebGetArg("all")=="1") then begin
          sess = MakeUUID;

          CreateFolder("tmp/" & sess);

          CUr.CertificateFlag = 1;
          td2 = CurrentDate;
          td2.month = 1;
          td2.day = 1;
          CUr.CertificateDate = td2;
          TrHs = true;
          while (LoopKey("CertificateDate",CUr,2,TrHs)) begin
            if (CUr.CertificateFlag!=1 or (GetYear(CUr.CertificateDate)!=td2.year)) then begin
              TrHs = false;
            end else begin
              if (CUr.TeacherCode==TCr.TeacherCode) then begin
                RepSpec.f1 = CUr.Code;
                DoPrintLiqCertificate(RepSpec,sess,true,allfilelist);
              end;
            end;
          end;
          //unite all files
          //output file
          //delete file
          RunShellScript("cd tmp/" & sess & "; pdfunite " & allfilelist & " Sertifikati_visi.pdf; cd ..;");

          WebSetContentType("application/pdf");
          WebSetContentDisposition("attachment; filename=Sertifikati.pdf");//or inline?
          WebOutFile("tmp/" & sess & "/Sertifikati_visi.pdf");
          DeleteFolder("tmp/" & sess);

        end else begin
          sess = MakeUUID;

          CreateFolder("tmp/" & sess);
          CUr.Code = WebGetArg("student");
          if (ReadFirstMain(CUr,1,true)) then begin
            if (CUr.TeacherCode==TCr.TeacherCode and CUr.CertificateFlag==1) then begin
              //print document
              RepSpec.f1 = CUr.Code;
              DoPrintLiqCertificate(RepSpec,sess,false,allfilelist);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global webpublic
updating procedure WebDownloadLiqCertificate()
begin
  record CUVc CUr,tCUr,oldCUr;
  record TeacherVc TCr;
  record SMFVc SMFr;
  record MentorVc MTr;
  Integer type;
  Boolean res;
  record RcVc RepSpec;
  string 255 allfilelist,sess;

  if (nonblank(CurrentCust)) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.CertificateFlag==1) then begin
        //print document
        sess = MakeUUID;

        CreateFolder("tmp/" & sess);
        RepSpec.f1 = CUr.Code;
        DoPrintLiqCertificate(RepSpec,sess,false,allfilelist);
      end;
    end;
  end;

  return;
end;
