//<halrule>server-only</halrule>
external procedure ReadWebUploadArgs(var string,var string,var string);
external procedure GetWebUploadSessionVars(string,var string,var string,var string);
external procedure FinishDocFileUpload(string,string,string,string);
external updating procedure FinishLandingFileUpload(string,string,string,string);
external updating procedure FinishLoanAppFileUpload(string,string,string,string);
external procedure LoadLoanSession(var vector string);
external function Boolean FindSMURecord(string,var record SMFVc);
external updating procedure FinishSMUFileUpload(string,string,string,string,Integer);
external updating procedure FinishSMUFileUpload2(string,string,string,string,Integer);
external updating procedure FinishSMUItemFileUpload(string,string,string,string);


function Boolean UploadFilePart(string sess,var Integer err)
begin
  Longint part,lastpart;
  string 255 path,tag;
  Boolean res;
  area filearea;
  
  part = StringToLongint(WebGetArg("part"));
  lastpart = StringToLongint(GetSessionString("fu_lastpart" & sess));
  tag = GetSessionString("wfu_tag" & sess);
  if (lastpart<part) then begin
    if (nonblank(sess)) then begin
      WebGetRawPostData(filearea);
      if (GetAreaLength(filearea)>0) then begin
        path = "tmp/" & tag & "/" & sess;
        if (FileExists(path)) then begin
          AppendAreaToFile(path,filearea);
          res = true;
        end;
      end;

      if (!res) then begin
        err = 2;
      end else begin
        PutSessionString("fu_lastpart" & sess,part);
      end;
    end else begin
      err = 4;
    end;
  end else begin
    err = 5;
  end;

  UploadFilePart = res;
  return;
end;

procedure SetupWebUploadSessionVars(var string sess,string filename,string id,string tag)
begin
  string 255 path;

  sess = MakeUUID;
  PutSessionString("wfu_fn" & sess,filename);
  PutSessionString("wfu_id" & sess,id);
  PutSessionString("wfu_tag" & sess,tag);
  path = "tmp/" & tag;
  if (DirExists(path)==false) then begin
    CreateFolder(path);
  end;
  if (FileExists(path & "/" & sess)) then begin
    Delete_File(path & "/" & sess);
  end;
  CreateFile(path & "/" & sess);
  CloseFile;

  return;
end;

procedure HandleFileUploadFinish(string sess)
begin
  string 255 path,filename,id,tag;
  vector string 255 vSess;

  GetWebUploadSessionVars(sess,filename,id,tag);

  LogText2(0,"HandleFileUploadFinish filename=" & filename & ", id=" & id & ", tag=" & tag,kVerbosityDebug);

  switch (tag) begin
    case "background":
      qupdating.FinishSMUFileUpload(sess,filename,id,tag,1);
    case "logo":
      qupdating.FinishSMUFileUpload(sess,filename,id,tag,0);
    case "logo2":
      qupdating.FinishSMUFileUpload2(sess,filename,id,tag,0);
    case "smuitem":
      qupdating.FinishSMUItemFileUpload(sess,filename,id,tag);
  end;

  path = "tmp/" & tag & "/" & sess;
  if (FileExists(path)) then begin
    Delete_File(path);
  end;

  return;
end;

function Boolean CanUploadToSMU()
begin
  record CUVc CUr;
  Boolean res;
  record RLinkVc RLr;
  record SMFVc SMFr;

  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = ReadRecordLink(CUr,1,SMFr,RLr) or FindSMURecord(CUr.Code,SMFr);
  end;

  CanUploadToSMU = res;
  return;
end;

function Boolean FileCanBeUploaded(string sess)
begin
  Boolean res;
  string 255 tag,filename,id;
  Boolean initf;
  vector string 255 vSess;
  
  if (nonblank(sess)) then begin
    GetWebUploadSessionVars(sess,filename,id,tag);
  end else begin
    tag = WebGetArg("tag");
    initf = true;
  end;
  
  switch (tag) begin
    case "logo":
      res = CanUploadToSMU;
    case "logo2":
      res = CanUploadToSMU;
    case "background":
      res = CanUploadToSMU;
    case "smuitem":
      res = CanUploadToSMU;
  end;

  FileCanBeUploaded = res;
  return;
end;

global
procedure WebFileUpload_Cust()
begin
  string 255 action,tag,filename,id;
  Boolean res;
  string 255 sess;
  Integer err;
  
  res = FileCanBeUploaded(WebGetArg("sess"));
  action = WebGetArg("action");

  if (res) then begin
    switch (action) begin
      case "startupload":
        ReadWebUploadArgs(filename,id,tag);
        SetupWebUploadSessionVars(sess,filename,id,tag);
        //Create the file here?
        WebOutString("<res stat='1' sessionid='" & sess & "'></res>");
      case "doupload":
        res = UploadFilePart(WebGetArg("sess"),err);
        WebOutString("<uploadpart res='" & res & "' err='" & err & "'></uploadpart>");
      case "finishupload":
        HandleFileUploadFinish(WebGetArg("sess"));
    end;
  end;  

  return;
end;
