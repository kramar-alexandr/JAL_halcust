//tools
external function string 10 CurrentWebLang;
external procedure ToolWebOutElementTextFormat(record WebNGElementVc);
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function boolean LoginState();
//translation
external function string 255 GetTranslatedNameMenu(record WebNGMenuVc);
//special elements
external procedure ShowWorldMapControl(record WebNGElementVc);
external procedure ShowCountryDropDownElement(record WebNGElementVc);
external procedure ShowLoggedInCustomer();
external function boolean ShowSpecialWebElement(record WebNGElementVc);
//statistics
external procedure LogWebNGElementAccess(string,string);
//forward declaration
external procedure ShowWebMenu(string);
external procedure ShowWebElement(string);
external procedure WebNGSearchView();
//CUST-BEGIN
external procedure SMURegForm();
external procedure SMUUpdateForm();
external procedure STURegForm();
external procedure DrawSignForNewsPage();
external procedure changeSelBox(boolean);
external procedure TeacherRegForm();
external procedure MentorRegForm();
external procedure CompListOut();
external procedure ShowCompProf();
external procedure DisplayLatestEvents();
external procedure DrawRemoveNewsForm();
external procedure WebShowLoginName();
external procedure ShowWebProfile();
external procedure ShowProfileForSMU();
external procedure ShowProfileForTeacher();
external procedure ShowProfileForMentor();
external procedure ShowAfterApplyPage();
external procedure ShowChangePasswordPage();
external procedure ShowAfterDeletePage();
external procedure ShowProfileCorrectionInfo();
external procedure AddEmpPage();
external procedure ShowUpdateTextElement();
external procedure EmpChangePage();
external procedure TchChangePage();// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 29 October 2018 13:41:27
external procedure DrawPasswordRecoveryPage();
external procedure WebShowEntry();
external procedure WebShowSmuEntry();
external procedure WebShowSmuArchiveEntry();
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external procedure ShowLastNewsPicture(string);
external procedure ShowSMUEditPage();
external procedure ShowShopEditPage();
external procedure ShowJALPartnerList();
external procedure ShowJALMentorList();
external procedure ShowJALEventList();
external procedure ShowBannerNewsList(string);
external procedure OutPutJALWebTexts(Integer);
external procedure ShowSchoolMap(record WebNGElementVc);
//CUST-END

procedure GetMenuActiveClass(record WebNGMenuVc WMr,var string actclass,var string class)
begin
  boolean res;
  transaction string 50 gVisitedNodes;

  actclass = "";
  class = "";
  if ((WMr.LinkToStruct>-1) and SetInSet(WMr.LinkToStruct,gVisitedNodes)) then begin
    actclass = " " & WMr.ActMenuClass;
  end;
  if (nonblank(WMr.MenuClass)) then begin
    class = " " & WMr.MenuClass;
  end;
  
  return;
end;

global
procedure ShowWebMenu(string menu)
begin
  record WebNGMenuVc WMr;
  boolean testf;
  boolean firstitem;
  string 25 ckey;
  string 255 linkpath,target;
  boolean oddf;
  string 20 actclass,class;
  
  testf = true;
  firstitem = true;
  WMr.Code = "";
  ckey = "MenuCode:" & menu;
  while (LoopKey(ckey,WMr,1,testf)) begin
    if ((LoginState and WMr.ShowWhenLoggedIn==1) or (LoginState==false and WMr.ShowWhenLoggedOut==1)) then begin
      GetMenuActiveClass(WMr,actclass,class);
      if (firstitem) then begin
        WebOutTagOpen("<ul>");
        WebOutTagOpen("<li class=""first odd" & class & actclass & """>");
        oddf = false;
        firstitem = false;
      end else begin
        if (oddf) then begin
          WebOutTagOpen("<li class=""odd" & class & actclass & """>");
          oddf = false;
        end else begin
          WebOutTagOpen("<li class=""even" & class & actclass & """>");
          oddf = true;
        end;
      end;

      if (nonblank(WMr.WebElement)) then begin
        ShowWebElement(WMr.WebElement);
      end else begin
        linkpath = GetLinkToStruct(WMr.LinkToStruct,true);
        linkpath = WMr.GoToURL & linkpath;
        if (WMr.NoSession==1) then begin
          linkpath = WMr.GoToURL;
        end;
        if (nonblank(WMr.Target)) then begin
          target = " target=""" & WMr.Target & """";
        end else begin
          target = "";
        end;
        WebOutStringFormat("<a href=""" & FormatLink(linkpath,WMr.ExtraArgs,(WMr.NoSession==1),true) & """" & target & ">");
        if (nonblank(WMr.LinkPict)) then begin
          WebOutStringFormat("<img src=""" & WMr.LinkPict & """>");
        end;
        WebOutStringFormat(GetTranslatedNameMenu(WMr));
        WebOutStringFormat("</a>");
      end;

      //show submenus
      ShowWebMenu(WMr.Code);

      WebOutTagClose("</li>");
    end;
  end;

  if (firstitem==false) then begin
    WebOutTagClose("</ul>");
  end;
  
  return;
end;

global
procedure ShowSubWebElement(record WebNGElementVc WEr,integer position)
begin
  row WebNGElementVc WErw;
  integer i,cnt;
  cnt = MatRowCnt(WEr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WEr,i,WErw);
    if (WErw.Position==position) then begin
      ShowWebElement(WErw.WebElement);
    end;
  end;
  return;
end;

procedure ShowWebElementHTML(record WebNGElementVc WEr)
begin
  //language selection/translation is done inside ToolWebOutElementTextFormat
  ToolWebOutElementTextFormat(WEr);
  return;
end;
function boolean ShowHALFunction(string func,record WebNGElementVc WEr)
begin
  boolean res;
  res = false;
  switch (func) begin
    case "worldmapcontrol":
      ShowWorldMapControl(WEr); res = true;
    case "testhal":
      ShowLoggedInCustomer; res = true;
    case "countrydropdown":
      ShowCountryDropDownElement(WEr); res = true;
    case "productsearch":
      WebNGSearchView; res = true;
//CUST-BEGIN
	case "SMURegForm":
	  SMURegForm; res = true;
	case "STURegForm":
	  STURegForm; res = true;
	case "DrawSignForNewsPage":
	  DrawSignForNewsPage; res = true;
	case "changeSelBox":
	  changeSelBox(true); res = true;
	case "TeacherRegForm":
	  TeacherRegForm; res = true;
	case "changeSelBoxT":
	  changeSelBox(false); res = true;
	case "MentorRegForm":
	  MentorRegForm; res = true;
	case "CompListOut":
	  CompListOut; res = true;
	case "ShowCompProf":
	  ShowCompProf; res = true;
	case "DisplayLatestEvents":
	  DisplayLatestEvents; res = true;
	case "DrawRemoveNewsForm":
	  DrawRemoveNewsForm; res = true;
	case "WebShowLoginName":
	  WebShowLoginName; res = true;
	case "ShowWebProfile":
	  ShowWebProfile; res = true;
	case "ShowProfileForSMU":
	  ShowProfileForSMU; res = true;
	case "ShowProfileForTeacher":
	  ShowProfileForTeacher; res = true;
	case "ShowProfileForMentor":
	  ShowProfileForMentor; res = true;
	case "ShowAfterApplyPage":
	  ShowAfterApplyPage; res = true;
	case "ShowChangePasswordPage":
	  ShowChangePasswordPage; res = true;
	case "ShowAfterDeletePage":
	  ShowAfterDeletePage; res = true;
  case "ShowProfileCorrectionInfo":
    ShowProfileCorrectionInfo; res = true;
  case "AddEmpPage":
    AddEmpPage; res = true;
  case "UpdateText":
    ShowUpdateTextElement; res = true;
  case "EmpChangePage":
    EmpChangePage; res = true;
  case "TchChangePage":// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 29 October 2018 13:41:22
    TchChangePage; res = true;// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 29 October 2018 13:41:23
  case "DrawPasswordRecoveryPage":
    DrawPasswordRecoveryPage; res = true;
  case "WebShowEntry":
    WebShowEntry; res = true;
  case "WebShowSmuEntry":
    WebShowSmuEntry; res = true;
  case "WebShowSmuArchiveEntry":
    WebShowSmuArchiveEntry; res = true;
  case "ShowLastNewsPicture":
    ShowLastNewsPicture(WEr.WebMenu); res = true;
  case "ShowSMUEditPage":
    ShowSMUEditPage; res = true;
  case "ShowShopEditPage":
    ShowShopEditPage; res = true;
  case "ShowJALPartnerList":
    ShowJALPartnerList; res = true;
  case "ShowJALMentorList":
    ShowJALMentorList; res = true;
  case "ShowJALEventList":
    ShowJALEventList; res = true;
  case "ShowBannerNewsList":
    ShowBannerNewsList(WEr.WebMenu); res = true;
  case "ShowWebTexts":
    OutPutJALWebTexts(0);
    OutPutJALWebTexts(1);
  case "ShowSchoolMap":
    ShowSchoolMap(WEr);
  case "SMUUpdateForm":
    SMUUpdateForm;

//CUST-END
  end;
  ShowHALFunction = res;
  return;
end;

procedure ShowWebElementXBefore(record WebNGElementVc WEr)
begin
  record WebNGElementVc TemplWEr;
  boolean hastemplate;
  string 255 tstr;
  
  hastemplate = false;
  if (nonblank(WEr.TemplateElement)) then begin
    TemplWEr.Code = WEr.TemplateElement;
    if (ReadFirstMain(TemplWEr,1,true)) then begin
      hastemplate = true;
    end;
  end;
  
  if (blank(WEr.DivID)) then begin WEr.DivID = TemplWEr.DivID; end;
  if (blank(WEr.DivClass)) then begin WEr.DivClass = TemplWEr.DivClass; end;

  if (WEr.NoDiv==0) then begin
    tstr = "<div";
    if (nonblank(WEr.DivID)) then begin tstr = tstr & " id=""" & WEr.DivID & """"; end;
    if (nonblank(WEr.DivClass)) then begin tstr = tstr & " class=""" & WEr.DivClass & """"; end;
    tstr = tstr & ">";
    WebOutTagOpen(tstr);
  end;
    
  if (hastemplate) then begin
    ShowSubWebElement(TemplWEr,0); //before
  end;
  
  ShowSubWebElement(WEr,0); //before
  return;
end;

procedure ShowWebElementXContent(record WebNGElementVc WEr)
begin
  record WebNGElementVc TemplWEr;
  string 255 tstr;
  boolean res;
  res = false;
  
  //apply template
  if (WEr.WrapContentInDiv==0) then begin
    if (nonblank(WEr.TemplateElement)) then begin
      TemplWEr.Code = WEr.TemplateElement;
      if (ReadFirstMain(TemplWEr,1,true)) then begin
        if (TemplWEr.WrapContentInDiv==1) then begin
          WEr.ContentDivID = TemplWEr.ContentDivID;
          WEr.ContentDivClass = TemplWEr.ContentDivClass;
          WEr.WrapContentInDiv = 1;
        end;
      end;
    end;
  end;
  if (WEr.WrapContentInDiv==1) then begin
    tstr = "<div";
    if (nonblank(WEr.ContentDivID)) then begin tstr = tstr & " id=""" & WEr.ContentDivID & """"; end;
    if (nonblank(WEr.ContentDivClass)) then begin tstr = tstr & " class=""" & WEr.ContentDivClass & """"; end;
    tstr = tstr & ">";
    WebOutTagOpen(tstr);
  end;
  
  if (WEr.Type!=kStructTypePage) then begin  //type 0 logs by itself
    if (WEr.LogAccess!=0) then begin
      LogWebNGElementAccess(WEr.Code,"");
    end;
  end;
  
  switch (WEr.Type) begin
    case kElementTypePlainHTML: ShowWebElementHTML(WEr);
    case kElementTypeHALFunction: res = ShowHALFunction(WEr.HALFunc,WEr);
    case kElementTypeWebMenu: ShowWebMenu(WEr.WebMenu);
    otherwise
      res = ShowSpecialWebElement(WEr);
  end;
  if (res==false) then begin //if content is not yet rendered
    ShowSubWebElement(WEr,1); //linked content
  end;

  if (WEr.WrapContentInDiv==1) then begin
    WebOutTagClose("</div>");
  end;

  return;
end;

procedure ShowWebElementXAfter(record WebNGElementVc WEr)
begin
  record WebNGElementVc TemplWEr;
  boolean hastemplate;
  
  hastemplate = false;
  if (nonblank(WEr.TemplateElement)) then begin
    TemplWEr.Code = WEr.TemplateElement;
    if (ReadFirstMain(TemplWEr,1,true)) then begin
      hastemplate = true;
    end;
  end;
  
  ShowSubWebElement(WEr,2); //after

  if (hastemplate) then begin
    ShowSubWebElement(TemplWEr,2); //after
  end;

  if (WEr.NoDiv==0) then begin
    WebOutTagClose("</div>");
  end;
  
  return;
end;

procedure ShowWebElementRecord(record WebNGElementVc WEr,boolean template,record WebNGElementVc htmltext,integer position)
begin
  boolean hastemplate,res,overriding;
  string 255 tstr;
  
  if (SizeTextCnt(htmltext)>0) then begin
    overriding = true;
  end;
  hastemplate = false;
  if (position==-1 or position==0) then begin
    ShowWebElementXBefore(WEr);
  end;
  
  if (position==-1 or position==1) then begin
    if (template==false and overriding==false) then begin
      ShowWebElementXContent(WEr);
    end;
    
    if (overriding) then begin
      ToolWebOutElementTextFormat(htmltext);
    end;
  end;
  
  if (position==-1 or position==2) then begin
    ShowWebElementXAfter(WEr);
  end;
  return;
end;

procedure ShowWebElementX(string element,boolean template,record WebNGElementVc htmltext,integer position)
begin
  record WebNGElementVc WEr;
  
  if (nonblank(element)) then begin
    WEr.Code = element;
    if (ReadFirstMain(WEr,1,true)) then begin
      ShowWebElementRecord(WEr,template,htmltext,position);
    end;
  end;
  return;
end;

global
procedure ShowSimpleWebElement(record WebNGElementVc WEr)
begin
  ShowWebElementRecord(WEr,false,WEr,-1);
  return;
end;

/*procedure ShowWebElementXOld(string element,boolean template,record WebNGElementVc htmltext)
begin
  record WebNGElementVc WEr,TemplWEr;
  boolean hastemplate,res,overriding;
  string 255 tstr;
  
  if (SizeTextCnt(htmltext)>0) then begin
    overriding = true;
  end;
  hastemplate = false;
  WEr.Code = element;
  if (ReadFirstMain(WEr,1,true)) then begin
    if (WEr.NoDiv==0) then begin
      tstr = "<div";
      if (nonblank(WEr.DivID)) then begin tstr = tstr & " id=""" & WEr.DivID & """"; end;
      if (nonblank(WEr.DivClass)) then begin tstr = tstr & " class=""" & WEr.DivClass & """"; end;
      tstr = tstr & ">";
      WebOutTagOpen(tstr);
    end;
    
    if (nonblank(WEr.TemplateElement)) then begin
      TemplWEr.Code = WEr.TemplateElement;
      if (ReadFirstMain(TemplWEr,1,true)) then begin
        hastemplate = true;
      end;
    end;
    
    if (hastemplate) then begin
      ShowSubWebElement(TemplWEr,0); //before
    end;
    
    ShowSubWebElement(WEr,0); //before
    
    if (template==false and overriding==false) then begin
      res = false;
      switch (WEr.Type) begin
        case 0: ShowWebElementHTML(WEr);
        case 1: res = ShowHALFunction(WEr.HALFunc,WEr);
        case 2: ShowWebMenu(WEr.WebMenu);
        otherwise
          res = ShowSpecialWebElement(WEr);
      end;
      if (res==false) then begin //if content is not yet rendered
        ShowSubWebElement(WEr,1); //linked content
      end;
    end;
    
    if (overriding) then begin
      ToolWebOutElementTextFormat(htmltext);
    end;
    
    ShowSubWebElement(WEr,2); //after

    if (hastemplate) then begin
      ShowSubWebElement(TemplWEr,2); //after
    end;

    if (WEr.NoDiv==0) then begin
      WebOutTagClose("</div>");
    end;
  end;
  return;
end;*/

global
procedure ShowWebElement(string element)
begin
  record WebNGElementVc dummy;
  transaction integer gSubElementDepthCount;
  transaction boolean gOutputTagComments;

  if (gSubElementDepthCount<10) then begin
    if (gOutputTagComments) then begin
      WebOutTagOpen("<!--[if !IE]> ELEMENT-BEGIN: " & element & " <![endif]-->");
    end;
    
    gSubElementDepthCount = gSubElementDepthCount+1;
    ShowWebElementX(element,false,dummy,-1);
    gSubElementDepthCount = gSubElementDepthCount-1;
    
    if (gOutputTagComments) then begin
      WebOutTagClose("<!--[if !IE]> ELEMENT-END: " & element & " <![endif]-->");
    end;
  end;
  return;
end;

//TODO: to be made obsolete: use next function
global
procedure ShowWebElementTemplate(string element,integer position)
begin
  record WebNGElementVc dummy;
  ShowWebElementX(element,true,dummy,position);
  return;
end;
/* can't have two functions globally declared with the same name....
global
procedure ShowWebElementTemplate(record WebNGElementVc WEr,integer position)
begin
  
  return;
end;
*/
global
procedure ShowWebElementOverrideContent(string element,record WebNGElementVc htmltext,integer position)
begin
  ShowWebElementX(element,false,htmltext,position);
  return;
end;

procedure AddSubElementsToArray(record WebNGElementVc WEr,integer position,var array string list)
begin
  integer i,cnt,p;
  row WebNGElementVc WErw;
  
  cnt = MatRowCnt(WEr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WEr,i,WErw);
    if (WErw.Position==position) then begin
      p = StringToInt(list[0]);
      p = p+1;
      list[p] = WErw.WebElement;
      list[0] = p;
    end;
  end;
  return;
end;

global
procedure ApplyTemplateToElement(var record WebNGElementVc WEr,string templateelement,integer level)
begin
  record WebNGElementVc TemplWEr;
  row WebNGElementVc WErw,TemplWErw;
  integer i,cnt,lineno;
  array string 255 beforelist,afterlist,contentlist;
  
  if (level<=10 and nonblank(templateelement)) then begin
    TemplWEr.Code = templateelement;
    if (ReadFirstMain(TemplWEr,1,true)) then begin
      //apply template of template first
      ApplyTemplateToElement(TemplWEr,TemplWEr.TemplateElement,level+1);
      WEr.TemplateElement = "";
      
      //apply settings
      if (blank(WEr.DivID)) then begin WEr.DivID = TemplWEr.DivID; end;
      if (blank(WEr.DivClass)) then begin WEr.DivClass = TemplWEr.DivClass; end;
      if (WEr.NoDiv==0) then begin WEr.NoDiv = TemplWEr.NoDiv; end;
      if (WEr.WrapContentInDiv==0) then begin
        if (TemplWEr.WrapContentInDiv==1) then begin
          WEr.WrapContentInDiv = 1;
          WEr.ContentDivID = TemplWEr.ContentDivID;
          WEr.ContentDivClass = TemplWEr.ContentDivClass;
        end;
      end;
      
      //add subelements
      AddSubElementsToArray(TemplWEr,0,beforelist);
      AddSubElementsToArray(WEr,0,beforelist);

      AddSubElementsToArray(WEr,1,contentlist);

      AddSubElementsToArray(WEr,2,afterlist);
      AddSubElementsToArray(TemplWEr,2,afterlist);
      
      cnt = MatRowCnt(WEr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowDelete(WEr,0);
      end;
      
      lineno = 0;
      
      cnt = StringToInt(beforelist[0]);
      for (i=1;i<=cnt;i=i+1) begin
        WErw.WebElement = beforelist[i];
        WErw.Position = 0;
        MatRowPut(WEr,lineno,WErw);
        lineno = lineno + 1;
      end;

      cnt = StringToInt(contentlist[0]);
      for (i=1;i<=cnt;i=i+1) begin
        WErw.WebElement = contentlist[i];
        WErw.Position = 1;
        MatRowPut(WEr,lineno,WErw);
        lineno = lineno + 1;
      end;

      cnt = StringToInt(afterlist[0]);
      for (i=1;i<=cnt;i=i+1) begin
        WErw.WebElement = afterlist[i];
        WErw.Position = 2;
        MatRowPut(WEr,lineno,WErw);
        lineno = lineno + 1;
      end;
    end;
  end;
  return;
end;
