procedure DisplayCourseInfo(record CourseEventVc CEr)begin  StartFormat(15);    OutStringID(2,"DblCourseEventVcSMU",CEr.CourseName,false,CEr.SerNr);    OutString(4,0,CEr.TransDate,false);  EndFormat;  StartFormat(1);    Gray_Divider(0,1);  EndFormat;return;end;function boolean CustIsSchoolar(record CUVc CUr)begin  boolean res;  record SMFVc SMFr;  record RLinkVc RLr;  res = false;  if ReadRecordLink(CUr,1,SMFr,RLr) then begin    res = true;  end;  CustIsSchoolar = res;return;end;procedure DisplayParticipant(row CourseEventVc CErw,integer smf,var integer cnt)begin  record CUVc CUr;  record SMFVc SMFr;  record RLinkVc RLr,RL2r;  record SchoolVc SCr;  record TeacherVc TCr;  CUr.Code = CErw.CustCode;  if readfirstmain(CUr,1,true) then begin    if ((smf>0) and CustIsSchoolar(CUr)==false) then begin    end else begin      cnt = cnt + 1;      StartFormat(15);      OutStringID(2,"DblCUVc",CUr.Name,false,CUr.Code);      if ReadRecordLink(CUr,1,SMFr,RLr) then begin        OutStringID(3,"SMFDbl",left(SMFr.SMFName,25),false,SMFr.SMFCode);        SCr.SchoolCode = SMFr.SchoolCode;        if readfirstmain(SCr,1,true) then begin end;        OutStringID(4,"SchoolDbl",left(SCr.SchoolName,40),false,SCr.SchoolCode);        TCr.TeacherCode = SMFr.TeacherCode;        if readfirstmain(TCr,1,true) then begin end;        OutStringID(5,"TeacherDbl",TCr.TeacherName,false,TCr.TeacherCode);      end else begin        OutString(3,0,"-",false);        SCr.SchoolCode = SMFr.SchoolCode;        if readRecordLink(CUr,1,SCr,RL2r) then begin          OutStringID(4,"SchoolDbl",left(SCr.SchoolName,40),false,SCr.SchoolCode);        end else begin          OutString(4,0,"-",false);        end;        OutString(5,0,"-",false);              end;      EndFormat;    end;  end;return;end;globalprocedure SMUCourseEventRn(record RCVc RepSpec)begin  record CourseEventVc CEr;  row CourseEventVc CErw;  record SMFVc SMFr;  integer cnt,rwcnt,i;  boolean TrHs,testf;  integer keylen;  keylen = 1;  StartReportJob(USetStr(32325));  EndHeader;  CEr.TransDate = RepSpec.sStartDate;  if RepSpec.long1>0 then begin    keylen = 2;    CEr.SerNr = RepSpec.long1;  end;  SetRepCol(2,15);  SetRepCol(3,130);  SetRepCol(4,220);  SetRepCol(5,350);  SetRepCol(6,400);  TrHs = true;  while loopkey("TransDate",CEr,keylen,TrHs)begin    if ((CEr.EndDate > RepSpec.sEndDate)) then begin      TrHs = false;    end else begin      testf = TrHs;      if (RepSpec.long1>0 and RepSpec.long1!=CEr.SerNr) then begin        testf = false;      end;      if testf then begin        DisplayCourseInfo(CEr);        rwcnt = MatRowCnt(CEr);        cnt = 0;        StartFormat(15);          OutString(2,0,USetStr(24697),false);          OutString(3,0,USetStr(32261),false);          OutString(4,0,USetStr(32264),false);          OutString(5,0,USetStr(32277),false);                  EndFormat;        for (i = 0; i < rwcnt; i = i + 1) begin          MatRowGet(CEr,i,CErw);          DisplayParticipant(CErw,RepSpec.flags[0],cnt);        end;        if cnt == 0 then begin          StartFormat(15);            OutString(15,0,UsetStr(32278),false);          endFormat;        end;        StartFormat(1);        Gray_Divider(0,1);        EndFormat;        StartFormat(15);        OutString(15,0,USetStr(20537) & cnt,false);        EndFormat;        StartFormat(1);        Black_Divider(0,1);        EndFormat;      end;    end;  end;  EndJob;return;end;